
THCS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002794  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  080028a4  080028a4  000128a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080028cc  080028cc  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  080028cc  080028cc  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  080028cc  080028cc  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080028cc  080028cc  000128cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080028d0  080028d0  000128d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  080028d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  20000018  080028ec  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000d8  080028ec  000200d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009e2d  00000000  00000000  00020041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001917  00000000  00000000  00029e6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000be0  00000000  00000000  0002b788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b48  00000000  00000000  0002c368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016c2d  00000000  00000000  0002ceb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b4d3  00000000  00000000  00043add  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008640f  00000000  00000000  0004efb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d53bf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032d4  00000000  00000000  000d5410  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000018 	.word	0x20000018
 800012c:	00000000 	.word	0x00000000
 8000130:	0800288c 	.word	0x0800288c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000001c 	.word	0x2000001c
 800014c:	0800288c 	.word	0x0800288c

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2uiz>:
 80008ec:	004a      	lsls	r2, r1, #1
 80008ee:	d211      	bcs.n	8000914 <__aeabi_d2uiz+0x28>
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f4:	d211      	bcs.n	800091a <__aeabi_d2uiz+0x2e>
 80008f6:	d50d      	bpl.n	8000914 <__aeabi_d2uiz+0x28>
 80008f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d40e      	bmi.n	8000920 <__aeabi_d2uiz+0x34>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	fa23 f002 	lsr.w	r0, r3, r2
 8000912:	4770      	bx	lr
 8000914:	f04f 0000 	mov.w	r0, #0
 8000918:	4770      	bx	lr
 800091a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800091e:	d102      	bne.n	8000926 <__aeabi_d2uiz+0x3a>
 8000920:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000924:	4770      	bx	lr
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	4770      	bx	lr

0800092c <DFPLAYER_SendUART>:
#include "DFPLAYER.h"
uint8_t SendFrame[10] = {0x7E, 0xFF, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xEF};

//******************************** LOW Level Functions ****************************//
static void DFPLAYER_SendUART(DFPLAYER_Name* MP3)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(MP3->DFP_UART, (uint8_t *)&MP3->SendBuff, sizeof(MP3->SendBuff), 1000);
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	6818      	ldr	r0, [r3, #0]
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	1d19      	adds	r1, r3, #4
 800093c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000940:	220a      	movs	r2, #10
 8000942:	f001 fe0c 	bl	800255e <HAL_UART_Transmit>
}
 8000946:	bf00      	nop
 8000948:	3708      	adds	r7, #8
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}

0800094e <DFPLAYER_Delay>:
static void DFPLAYER_Delay(uint16_t Time)
{
 800094e:	b580      	push	{r7, lr}
 8000950:	b082      	sub	sp, #8
 8000952:	af00      	add	r7, sp, #0
 8000954:	4603      	mov	r3, r0
 8000956:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(Time);
 8000958:	88fb      	ldrh	r3, [r7, #6]
 800095a:	4618      	mov	r0, r3
 800095c:	f000 fc28 	bl	80011b0 <HAL_Delay>
}
 8000960:	bf00      	nop
 8000962:	3708      	adds	r7, #8
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}

08000968 <DFPLAYER_GetChecksum>:

static uint16_t DFPLAYER_GetChecksum (uint8_t *thebuf)
{
 8000968:	b480      	push	{r7}
 800096a:	b085      	sub	sp, #20
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
	uint16_t sum = 0;
 8000970:	2300      	movs	r3, #0
 8000972:	81fb      	strh	r3, [r7, #14]
	for (int i=1; i<7; i++) 
 8000974:	2301      	movs	r3, #1
 8000976:	60bb      	str	r3, [r7, #8]
 8000978:	e00a      	b.n	8000990 <DFPLAYER_GetChecksum+0x28>
	{
		sum += thebuf[i];
 800097a:	68bb      	ldr	r3, [r7, #8]
 800097c:	687a      	ldr	r2, [r7, #4]
 800097e:	4413      	add	r3, r2
 8000980:	781b      	ldrb	r3, [r3, #0]
 8000982:	b29a      	uxth	r2, r3
 8000984:	89fb      	ldrh	r3, [r7, #14]
 8000986:	4413      	add	r3, r2
 8000988:	81fb      	strh	r3, [r7, #14]
	for (int i=1; i<7; i++) 
 800098a:	68bb      	ldr	r3, [r7, #8]
 800098c:	3301      	adds	r3, #1
 800098e:	60bb      	str	r3, [r7, #8]
 8000990:	68bb      	ldr	r3, [r7, #8]
 8000992:	2b06      	cmp	r3, #6
 8000994:	ddf1      	ble.n	800097a <DFPLAYER_GetChecksum+0x12>
	}
	return -sum;
 8000996:	89fb      	ldrh	r3, [r7, #14]
 8000998:	425b      	negs	r3, r3
 800099a:	b29b      	uxth	r3, r3
}
 800099c:	4618      	mov	r0, r3
 800099e:	3714      	adds	r7, #20
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bc80      	pop	{r7}
 80009a4:	4770      	bx	lr

080009a6 <DFPLAYER_FillBigend>:

static void DFPLAYER_FillBigend (uint8_t *thebuf, uint16_t data) {
 80009a6:	b480      	push	{r7}
 80009a8:	b083      	sub	sp, #12
 80009aa:	af00      	add	r7, sp, #0
 80009ac:	6078      	str	r0, [r7, #4]
 80009ae:	460b      	mov	r3, r1
 80009b0:	807b      	strh	r3, [r7, #2]
	*thebuf =	(uint8_t)(data>>8);
 80009b2:	887b      	ldrh	r3, [r7, #2]
 80009b4:	0a1b      	lsrs	r3, r3, #8
 80009b6:	b29b      	uxth	r3, r3
 80009b8:	b2da      	uxtb	r2, r3
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	701a      	strb	r2, [r3, #0]
	*(thebuf+1) =	(uint8_t)data;
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	3301      	adds	r3, #1
 80009c2:	887a      	ldrh	r2, [r7, #2]
 80009c4:	b2d2      	uxtb	r2, r2
 80009c6:	701a      	strb	r2, [r3, #0]
}
 80009c8:	bf00      	nop
 80009ca:	370c      	adds	r7, #12
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bc80      	pop	{r7}
 80009d0:	4770      	bx	lr

080009d2 <DFPLAYER_FillChecksum>:

static void DFPLAYER_FillChecksum (DFPLAYER_Name* MP3){
 80009d2:	b580      	push	{r7, lr}
 80009d4:	b084      	sub	sp, #16
 80009d6:	af00      	add	r7, sp, #0
 80009d8:	6078      	str	r0, [r7, #4]
	uint16_t checksum = DFPLAYER_GetChecksum (MP3->SendBuff);
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	3304      	adds	r3, #4
 80009de:	4618      	mov	r0, r3
 80009e0:	f7ff ffc2 	bl	8000968 <DFPLAYER_GetChecksum>
 80009e4:	4603      	mov	r3, r0
 80009e6:	81fb      	strh	r3, [r7, #14]
	DFPLAYER_FillBigend (MP3->SendBuff+7, checksum);
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	3304      	adds	r3, #4
 80009ec:	3307      	adds	r3, #7
 80009ee:	89fa      	ldrh	r2, [r7, #14]
 80009f0:	4611      	mov	r1, r2
 80009f2:	4618      	mov	r0, r3
 80009f4:	f7ff ffd7 	bl	80009a6 <DFPLAYER_FillBigend>
}
 80009f8:	bf00      	nop
 80009fa:	3710      	adds	r7, #16
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}

08000a00 <DFPLAYER_SendCmd>:

static void DFPLAYER_SendCmd(DFPLAYER_Name* MP3, uint8_t cmd, uint16_t high_arg, uint16_t low_arg)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b084      	sub	sp, #16
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	60f8      	str	r0, [r7, #12]
 8000a08:	4608      	mov	r0, r1
 8000a0a:	4611      	mov	r1, r2
 8000a0c:	461a      	mov	r2, r3
 8000a0e:	4603      	mov	r3, r0
 8000a10:	72fb      	strb	r3, [r7, #11]
 8000a12:	460b      	mov	r3, r1
 8000a14:	813b      	strh	r3, [r7, #8]
 8000a16:	4613      	mov	r3, r2
 8000a18:	80fb      	strh	r3, [r7, #6]
	DFPLAYER_Delay(100);
 8000a1a:	2064      	movs	r0, #100	; 0x64
 8000a1c:	f7ff ff97 	bl	800094e <DFPLAYER_Delay>
	MP3->SendBuff[3] = cmd;
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	7afa      	ldrb	r2, [r7, #11]
 8000a24:	71da      	strb	r2, [r3, #7]
	MP3->SendBuff[5] = high_arg;
 8000a26:	893b      	ldrh	r3, [r7, #8]
 8000a28:	b2da      	uxtb	r2, r3
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	725a      	strb	r2, [r3, #9]
	MP3->SendBuff[6] = low_arg;
 8000a2e:	88fb      	ldrh	r3, [r7, #6]
 8000a30:	b2da      	uxtb	r2, r3
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	729a      	strb	r2, [r3, #10]
	DFPLAYER_FillChecksum(MP3);
 8000a36:	68f8      	ldr	r0, [r7, #12]
 8000a38:	f7ff ffcb 	bl	80009d2 <DFPLAYER_FillChecksum>
	DFPLAYER_SendUART(MP3);
 8000a3c:	68f8      	ldr	r0, [r7, #12]
 8000a3e:	f7ff ff75 	bl	800092c <DFPLAYER_SendUART>
}
 8000a42:	bf00      	nop
 8000a44:	3710      	adds	r7, #16
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
	...

08000a4c <DFPLAYER_Init>:

//******************************** High Level Functions ****************************//
void DFPLAYER_Init(DFPLAYER_Name* MP3, UART_HandleTypeDef* UART)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b085      	sub	sp, #20
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
 8000a54:	6039      	str	r1, [r7, #0]
	for(int i = 0; i<10; i++)
 8000a56:	2300      	movs	r3, #0
 8000a58:	60fb      	str	r3, [r7, #12]
 8000a5a:	e00c      	b.n	8000a76 <DFPLAYER_Init+0x2a>
	{
		MP3->SendBuff[i] = SendFrame[i];
 8000a5c:	4a0b      	ldr	r2, [pc, #44]	; (8000a8c <DFPLAYER_Init+0x40>)
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	4413      	add	r3, r2
 8000a62:	7819      	ldrb	r1, [r3, #0]
 8000a64:	687a      	ldr	r2, [r7, #4]
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	4413      	add	r3, r2
 8000a6a:	3304      	adds	r3, #4
 8000a6c:	460a      	mov	r2, r1
 8000a6e:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i<10; i++)
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	3301      	adds	r3, #1
 8000a74:	60fb      	str	r3, [r7, #12]
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	2b09      	cmp	r3, #9
 8000a7a:	ddef      	ble.n	8000a5c <DFPLAYER_Init+0x10>
	}
	MP3->DFP_UART = UART;
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	683a      	ldr	r2, [r7, #0]
 8000a80:	601a      	str	r2, [r3, #0]
}
 8000a82:	bf00      	nop
 8000a84:	3714      	adds	r7, #20
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bc80      	pop	{r7}
 8000a8a:	4770      	bx	lr
 8000a8c:	20000000 	.word	0x20000000

08000a90 <DFPLAYER_SetVolume>:
{
	DFPLAYER_SendCmd(MP3, DFP_PREV,00,00);
}

void DFPLAYER_SetVolume(DFPLAYER_Name* MP3, uint16_t volume)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b084      	sub	sp, #16
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
 8000a98:	460b      	mov	r3, r1
 8000a9a:	807b      	strh	r3, [r7, #2]
	uint8_t volume1 = volume>>8;
 8000a9c:	887b      	ldrh	r3, [r7, #2]
 8000a9e:	0a1b      	lsrs	r3, r3, #8
 8000aa0:	b29b      	uxth	r3, r3
 8000aa2:	73fb      	strb	r3, [r7, #15]
	uint8_t volume2 = volume;
 8000aa4:	887b      	ldrh	r3, [r7, #2]
 8000aa6:	73bb      	strb	r3, [r7, #14]
	DFPLAYER_SendCmd(MP3, DFP_SETVOLUME, volume1, volume2);
 8000aa8:	7bfb      	ldrb	r3, [r7, #15]
 8000aaa:	b29a      	uxth	r2, r3
 8000aac:	7bbb      	ldrb	r3, [r7, #14]
 8000aae:	b29b      	uxth	r3, r3
 8000ab0:	2106      	movs	r1, #6
 8000ab2:	6878      	ldr	r0, [r7, #4]
 8000ab4:	f7ff ffa4 	bl	8000a00 <DFPLAYER_SendCmd>
}
 8000ab8:	bf00      	nop
 8000aba:	3710      	adds	r7, #16
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}

08000ac0 <DFPLAYER_Play>:

void DFPLAYER_Play(DFPLAYER_Name* MP3) 
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
	DFPLAYER_SendCmd(MP3, DFP_PLAY, 00, 00);
 8000ac8:	2300      	movs	r3, #0
 8000aca:	2200      	movs	r2, #0
 8000acc:	210d      	movs	r1, #13
 8000ace:	6878      	ldr	r0, [r7, #4]
 8000ad0:	f7ff ff96 	bl	8000a00 <DFPLAYER_SendCmd>
} 
 8000ad4:	bf00      	nop
 8000ad6:	3708      	adds	r7, #8
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}

08000adc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ae0:	f000 fb04 	bl	80010ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ae4:	f000 f8d0 	bl	8000c88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ae8:	f000 f98e 	bl	8000e08 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000aec:	f000 f912 	bl	8000d14 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000af0:	f000 f960 	bl	8000db4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  DFPLAYER_Init(&MP3, &huart1);
 8000af4:	490b      	ldr	r1, [pc, #44]	; (8000b24 <main+0x48>)
 8000af6:	480c      	ldr	r0, [pc, #48]	; (8000b28 <main+0x4c>)
 8000af8:	f7ff ffa8 	bl	8000a4c <DFPLAYER_Init>
  DFPLAYER_SetVolume(&MP3, 60);
 8000afc:	213c      	movs	r1, #60	; 0x3c
 8000afe:	480a      	ldr	r0, [pc, #40]	; (8000b28 <main+0x4c>)
 8000b00:	f7ff ffc6 	bl	8000a90 <DFPLAYER_SetVolume>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  Value = GetDistance();
 8000b04:	f000 f814 	bl	8000b30 <GetDistance>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	461a      	mov	r2, r3
 8000b0c:	4b07      	ldr	r3, [pc, #28]	; (8000b2c <main+0x50>)
 8000b0e:	601a      	str	r2, [r3, #0]
	  if(Value < 6){
 8000b10:	4b06      	ldr	r3, [pc, #24]	; (8000b2c <main+0x50>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	2b05      	cmp	r3, #5
 8000b16:	d8f5      	bhi.n	8000b04 <main+0x28>
		  DFPLAYER_Play(&MP3);
 8000b18:	4803      	ldr	r0, [pc, #12]	; (8000b28 <main+0x4c>)
 8000b1a:	f7ff ffd1 	bl	8000ac0 <DFPLAYER_Play>
		  Cheer();
 8000b1e:	f000 f887 	bl	8000c30 <Cheer>
	  Value = GetDistance();
 8000b22:	e7ef      	b.n	8000b04 <main+0x28>
 8000b24:	2000008c 	.word	0x2000008c
 8000b28:	20000034 	.word	0x20000034
 8000b2c:	200000d0 	.word	0x200000d0

08000b30 <GetDistance>:
    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

int GetDistance(void){
 8000b30:	b590      	push	{r4, r7, lr}
 8000b32:	b085      	sub	sp, #20
 8000b34:	af00      	add	r7, sp, #0
	 uint32_t pMillis;
	 uint32_t Value1 = 0;
 8000b36:	2300      	movs	r3, #0
 8000b38:	60fb      	str	r3, [r7, #12]
	 uint32_t Value2 = 0;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	60bb      	str	r3, [r7, #8]
	 uint16_t Distance  = 0;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	80fb      	strh	r3, [r7, #6]

	 HAL_TIM_Base_Start(&htim1);
 8000b42:	4839      	ldr	r0, [pc, #228]	; (8000c28 <GetDistance+0xf8>)
 8000b44:	f001 fa5a 	bl	8001ffc <HAL_TIM_Base_Start>
	 HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);
 8000b48:	2200      	movs	r2, #0
 8000b4a:	2108      	movs	r1, #8
 8000b4c:	4837      	ldr	r0, [pc, #220]	; (8000c2c <GetDistance+0xfc>)
 8000b4e:	f000 fdd2 	bl	80016f6 <HAL_GPIO_WritePin>

	 HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8000b52:	2201      	movs	r2, #1
 8000b54:	2108      	movs	r1, #8
 8000b56:	4835      	ldr	r0, [pc, #212]	; (8000c2c <GetDistance+0xfc>)
 8000b58:	f000 fdcd 	bl	80016f6 <HAL_GPIO_WritePin>
	 __HAL_TIM_SET_COUNTER(&htim1, 0);
 8000b5c:	4b32      	ldr	r3, [pc, #200]	; (8000c28 <GetDistance+0xf8>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	2200      	movs	r2, #0
 8000b62:	625a      	str	r2, [r3, #36]	; 0x24
     while (__HAL_TIM_GET_COUNTER (&htim1) < 10);  // wait for 10 us
 8000b64:	bf00      	nop
 8000b66:	4b30      	ldr	r3, [pc, #192]	; (8000c28 <GetDistance+0xf8>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b6c:	2b09      	cmp	r3, #9
 8000b6e:	d9fa      	bls.n	8000b66 <GetDistance+0x36>
	 HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 8000b70:	2200      	movs	r2, #0
 8000b72:	2108      	movs	r1, #8
 8000b74:	482d      	ldr	r0, [pc, #180]	; (8000c2c <GetDistance+0xfc>)
 8000b76:	f000 fdbe 	bl	80016f6 <HAL_GPIO_WritePin>

	 pMillis = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
 8000b7a:	f000 fb0f 	bl	800119c <HAL_GetTick>
 8000b7e:	6038      	str	r0, [r7, #0]
	 // wait for the echo pin to go high
	 while (!(HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN)) && pMillis + 10 >  HAL_GetTick());
 8000b80:	bf00      	nop
 8000b82:	2110      	movs	r1, #16
 8000b84:	4829      	ldr	r0, [pc, #164]	; (8000c2c <GetDistance+0xfc>)
 8000b86:	f000 fd9f 	bl	80016c8 <HAL_GPIO_ReadPin>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d107      	bne.n	8000ba0 <GetDistance+0x70>
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	f103 040a 	add.w	r4, r3, #10
 8000b96:	f000 fb01 	bl	800119c <HAL_GetTick>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	429c      	cmp	r4, r3
 8000b9e:	d8f0      	bhi.n	8000b82 <GetDistance+0x52>
	 Value1 = __HAL_TIM_GET_COUNTER (&htim1);
 8000ba0:	4b21      	ldr	r3, [pc, #132]	; (8000c28 <GetDistance+0xf8>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ba6:	60fb      	str	r3, [r7, #12]

	 pMillis = HAL_GetTick(); // used this to avoid infinite while loop (for timeout)
 8000ba8:	f000 faf8 	bl	800119c <HAL_GetTick>
 8000bac:	6038      	str	r0, [r7, #0]
	 // wait for the echo pin to go low
	 while ((HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN)) && pMillis + 50 > HAL_GetTick());
 8000bae:	bf00      	nop
 8000bb0:	2110      	movs	r1, #16
 8000bb2:	481e      	ldr	r0, [pc, #120]	; (8000c2c <GetDistance+0xfc>)
 8000bb4:	f000 fd88 	bl	80016c8 <HAL_GPIO_ReadPin>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d007      	beq.n	8000bce <GetDistance+0x9e>
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	f103 0432 	add.w	r4, r3, #50	; 0x32
 8000bc4:	f000 faea 	bl	800119c <HAL_GetTick>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	429c      	cmp	r4, r3
 8000bcc:	d8f0      	bhi.n	8000bb0 <GetDistance+0x80>
	 Value2 = __HAL_TIM_GET_COUNTER (&htim1);
 8000bce:	4b16      	ldr	r3, [pc, #88]	; (8000c28 <GetDistance+0xf8>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bd4:	60bb      	str	r3, [r7, #8]

	 Distance = (Value2-Value1)* 0.034/2;
 8000bd6:	68ba      	ldr	r2, [r7, #8]
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	1ad3      	subs	r3, r2, r3
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f7ff fbf9 	bl	80003d4 <__aeabi_ui2d>
 8000be2:	a30f      	add	r3, pc, #60	; (adr r3, 8000c20 <GetDistance+0xf0>)
 8000be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000be8:	f7ff fc6e 	bl	80004c8 <__aeabi_dmul>
 8000bec:	4602      	mov	r2, r0
 8000bee:	460b      	mov	r3, r1
 8000bf0:	4610      	mov	r0, r2
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	f04f 0200 	mov.w	r2, #0
 8000bf8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000bfc:	f7ff fd8e 	bl	800071c <__aeabi_ddiv>
 8000c00:	4602      	mov	r2, r0
 8000c02:	460b      	mov	r3, r1
 8000c04:	4610      	mov	r0, r2
 8000c06:	4619      	mov	r1, r3
 8000c08:	f7ff fe70 	bl	80008ec <__aeabi_d2uiz>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	80fb      	strh	r3, [r7, #6]
	 HAL_Delay(50);
 8000c10:	2032      	movs	r0, #50	; 0x32
 8000c12:	f000 facd 	bl	80011b0 <HAL_Delay>

	 return Distance;
 8000c16:	88fb      	ldrh	r3, [r7, #6]
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	3714      	adds	r7, #20
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd90      	pop	{r4, r7, pc}
 8000c20:	b020c49c 	.word	0xb020c49c
 8000c24:	3fa16872 	.word	0x3fa16872
 8000c28:	20000044 	.word	0x20000044
 8000c2c:	40010c00 	.word	0x40010c00

08000c30 <Cheer>:

void Cheer(void){
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8000c36:	2201      	movs	r2, #1
 8000c38:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c3c:	4811      	ldr	r0, [pc, #68]	; (8000c84 <Cheer+0x54>)
 8000c3e:	f000 fd5a 	bl	80016f6 <HAL_GPIO_WritePin>
	for(int i=0; i < 250; i++){
 8000c42:	2300      	movs	r3, #0
 8000c44:	607b      	str	r3, [r7, #4]
 8000c46:	e014      	b.n	8000c72 <Cheer+0x42>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8000c48:	2201      	movs	r2, #1
 8000c4a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c4e:	480d      	ldr	r0, [pc, #52]	; (8000c84 <Cheer+0x54>)
 8000c50:	f000 fd51 	bl	80016f6 <HAL_GPIO_WritePin>
		HAL_Delay(70);
 8000c54:	2046      	movs	r0, #70	; 0x46
 8000c56:	f000 faab 	bl	80011b0 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c60:	4808      	ldr	r0, [pc, #32]	; (8000c84 <Cheer+0x54>)
 8000c62:	f000 fd48 	bl	80016f6 <HAL_GPIO_WritePin>
		HAL_Delay(70);
 8000c66:	2046      	movs	r0, #70	; 0x46
 8000c68:	f000 faa2 	bl	80011b0 <HAL_Delay>
	for(int i=0; i < 250; i++){
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	3301      	adds	r3, #1
 8000c70:	607b      	str	r3, [r7, #4]
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	2bf9      	cmp	r3, #249	; 0xf9
 8000c76:	dde7      	ble.n	8000c48 <Cheer+0x18>
	}
}
 8000c78:	bf00      	nop
 8000c7a:	bf00      	nop
 8000c7c:	3708      	adds	r7, #8
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	40010800 	.word	0x40010800

08000c88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b090      	sub	sp, #64	; 0x40
 8000c8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c8e:	f107 0318 	add.w	r3, r7, #24
 8000c92:	2228      	movs	r2, #40	; 0x28
 8000c94:	2100      	movs	r1, #0
 8000c96:	4618      	mov	r0, r3
 8000c98:	f001 fdf0 	bl	800287c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c9c:	1d3b      	adds	r3, r7, #4
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	601a      	str	r2, [r3, #0]
 8000ca2:	605a      	str	r2, [r3, #4]
 8000ca4:	609a      	str	r2, [r3, #8]
 8000ca6:	60da      	str	r2, [r3, #12]
 8000ca8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000caa:	2301      	movs	r3, #1
 8000cac:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000cae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cb2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cbc:	2302      	movs	r3, #2
 8000cbe:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cc0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cc4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000cc6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000cca:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ccc:	f107 0318 	add.w	r3, r7, #24
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f000 fd29 	bl	8001728 <HAL_RCC_OscConfig>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000cdc:	f000 f910 	bl	8000f00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ce0:	230f      	movs	r3, #15
 8000ce2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cf0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000cf6:	1d3b      	adds	r3, r7, #4
 8000cf8:	2102      	movs	r1, #2
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f000 ff96 	bl	8001c2c <HAL_RCC_ClockConfig>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000d06:	f000 f8fb 	bl	8000f00 <Error_Handler>
  }
}
 8000d0a:	bf00      	nop
 8000d0c:	3740      	adds	r7, #64	; 0x40
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
	...

08000d14 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b086      	sub	sp, #24
 8000d18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d1a:	f107 0308 	add.w	r3, r7, #8
 8000d1e:	2200      	movs	r2, #0
 8000d20:	601a      	str	r2, [r3, #0]
 8000d22:	605a      	str	r2, [r3, #4]
 8000d24:	609a      	str	r2, [r3, #8]
 8000d26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d28:	463b      	mov	r3, r7
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	601a      	str	r2, [r3, #0]
 8000d2e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d30:	4b1e      	ldr	r3, [pc, #120]	; (8000dac <MX_TIM1_Init+0x98>)
 8000d32:	4a1f      	ldr	r2, [pc, #124]	; (8000db0 <MX_TIM1_Init+0x9c>)
 8000d34:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8000d36:	4b1d      	ldr	r3, [pc, #116]	; (8000dac <MX_TIM1_Init+0x98>)
 8000d38:	2247      	movs	r2, #71	; 0x47
 8000d3a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d3c:	4b1b      	ldr	r3, [pc, #108]	; (8000dac <MX_TIM1_Init+0x98>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000d42:	4b1a      	ldr	r3, [pc, #104]	; (8000dac <MX_TIM1_Init+0x98>)
 8000d44:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d48:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d4a:	4b18      	ldr	r3, [pc, #96]	; (8000dac <MX_TIM1_Init+0x98>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d50:	4b16      	ldr	r3, [pc, #88]	; (8000dac <MX_TIM1_Init+0x98>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d56:	4b15      	ldr	r3, [pc, #84]	; (8000dac <MX_TIM1_Init+0x98>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d5c:	4813      	ldr	r0, [pc, #76]	; (8000dac <MX_TIM1_Init+0x98>)
 8000d5e:	f001 f8fd 	bl	8001f5c <HAL_TIM_Base_Init>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d001      	beq.n	8000d6c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000d68:	f000 f8ca 	bl	8000f00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d70:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d72:	f107 0308 	add.w	r3, r7, #8
 8000d76:	4619      	mov	r1, r3
 8000d78:	480c      	ldr	r0, [pc, #48]	; (8000dac <MX_TIM1_Init+0x98>)
 8000d7a:	f001 f989 	bl	8002090 <HAL_TIM_ConfigClockSource>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000d84:	f000 f8bc 	bl	8000f00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d90:	463b      	mov	r3, r7
 8000d92:	4619      	mov	r1, r3
 8000d94:	4805      	ldr	r0, [pc, #20]	; (8000dac <MX_TIM1_Init+0x98>)
 8000d96:	f001 fb37 	bl	8002408 <HAL_TIMEx_MasterConfigSynchronization>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000da0:	f000 f8ae 	bl	8000f00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000da4:	bf00      	nop
 8000da6:	3718      	adds	r7, #24
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	20000044 	.word	0x20000044
 8000db0:	40012c00 	.word	0x40012c00

08000db4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000db8:	4b11      	ldr	r3, [pc, #68]	; (8000e00 <MX_USART1_UART_Init+0x4c>)
 8000dba:	4a12      	ldr	r2, [pc, #72]	; (8000e04 <MX_USART1_UART_Init+0x50>)
 8000dbc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000dbe:	4b10      	ldr	r3, [pc, #64]	; (8000e00 <MX_USART1_UART_Init+0x4c>)
 8000dc0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000dc4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000dc6:	4b0e      	ldr	r3, [pc, #56]	; (8000e00 <MX_USART1_UART_Init+0x4c>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000dcc:	4b0c      	ldr	r3, [pc, #48]	; (8000e00 <MX_USART1_UART_Init+0x4c>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000dd2:	4b0b      	ldr	r3, [pc, #44]	; (8000e00 <MX_USART1_UART_Init+0x4c>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000dd8:	4b09      	ldr	r3, [pc, #36]	; (8000e00 <MX_USART1_UART_Init+0x4c>)
 8000dda:	220c      	movs	r2, #12
 8000ddc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dde:	4b08      	ldr	r3, [pc, #32]	; (8000e00 <MX_USART1_UART_Init+0x4c>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000de4:	4b06      	ldr	r3, [pc, #24]	; (8000e00 <MX_USART1_UART_Init+0x4c>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000dea:	4805      	ldr	r0, [pc, #20]	; (8000e00 <MX_USART1_UART_Init+0x4c>)
 8000dec:	f001 fb6a 	bl	80024c4 <HAL_UART_Init>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000df6:	f000 f883 	bl	8000f00 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000dfa:	bf00      	nop
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	2000008c 	.word	0x2000008c
 8000e04:	40013800 	.word	0x40013800

08000e08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b088      	sub	sp, #32
 8000e0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e0e:	f107 0310 	add.w	r3, r7, #16
 8000e12:	2200      	movs	r2, #0
 8000e14:	601a      	str	r2, [r3, #0]
 8000e16:	605a      	str	r2, [r3, #4]
 8000e18:	609a      	str	r2, [r3, #8]
 8000e1a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e1c:	4b35      	ldr	r3, [pc, #212]	; (8000ef4 <MX_GPIO_Init+0xec>)
 8000e1e:	699b      	ldr	r3, [r3, #24]
 8000e20:	4a34      	ldr	r2, [pc, #208]	; (8000ef4 <MX_GPIO_Init+0xec>)
 8000e22:	f043 0320 	orr.w	r3, r3, #32
 8000e26:	6193      	str	r3, [r2, #24]
 8000e28:	4b32      	ldr	r3, [pc, #200]	; (8000ef4 <MX_GPIO_Init+0xec>)
 8000e2a:	699b      	ldr	r3, [r3, #24]
 8000e2c:	f003 0320 	and.w	r3, r3, #32
 8000e30:	60fb      	str	r3, [r7, #12]
 8000e32:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e34:	4b2f      	ldr	r3, [pc, #188]	; (8000ef4 <MX_GPIO_Init+0xec>)
 8000e36:	699b      	ldr	r3, [r3, #24]
 8000e38:	4a2e      	ldr	r2, [pc, #184]	; (8000ef4 <MX_GPIO_Init+0xec>)
 8000e3a:	f043 0304 	orr.w	r3, r3, #4
 8000e3e:	6193      	str	r3, [r2, #24]
 8000e40:	4b2c      	ldr	r3, [pc, #176]	; (8000ef4 <MX_GPIO_Init+0xec>)
 8000e42:	699b      	ldr	r3, [r3, #24]
 8000e44:	f003 0304 	and.w	r3, r3, #4
 8000e48:	60bb      	str	r3, [r7, #8]
 8000e4a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e4c:	4b29      	ldr	r3, [pc, #164]	; (8000ef4 <MX_GPIO_Init+0xec>)
 8000e4e:	699b      	ldr	r3, [r3, #24]
 8000e50:	4a28      	ldr	r2, [pc, #160]	; (8000ef4 <MX_GPIO_Init+0xec>)
 8000e52:	f043 0308 	orr.w	r3, r3, #8
 8000e56:	6193      	str	r3, [r2, #24]
 8000e58:	4b26      	ldr	r3, [pc, #152]	; (8000ef4 <MX_GPIO_Init+0xec>)
 8000e5a:	699b      	ldr	r3, [r3, #24]
 8000e5c:	f003 0308 	and.w	r3, r3, #8
 8000e60:	607b      	str	r3, [r7, #4]
 8000e62:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8000e64:	2200      	movs	r2, #0
 8000e66:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e6a:	4823      	ldr	r0, [pc, #140]	; (8000ef8 <MX_GPIO_Init+0xf0>)
 8000e6c:	f000 fc43 	bl	80016f6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8000e70:	2200      	movs	r2, #0
 8000e72:	2108      	movs	r1, #8
 8000e74:	4821      	ldr	r0, [pc, #132]	; (8000efc <MX_GPIO_Init+0xf4>)
 8000e76:	f000 fc3e 	bl	80016f6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000e7a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000e7e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e80:	2301      	movs	r3, #1
 8000e82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e84:	2300      	movs	r3, #0
 8000e86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e88:	2302      	movs	r3, #2
 8000e8a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e8c:	f107 0310 	add.w	r3, r7, #16
 8000e90:	4619      	mov	r1, r3
 8000e92:	4819      	ldr	r0, [pc, #100]	; (8000ef8 <MX_GPIO_Init+0xf0>)
 8000e94:	f000 fa94 	bl	80013c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000e98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e9c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eaa:	f107 0310 	add.w	r3, r7, #16
 8000eae:	4619      	mov	r1, r3
 8000eb0:	4811      	ldr	r0, [pc, #68]	; (8000ef8 <MX_GPIO_Init+0xf0>)
 8000eb2:	f000 fa85 	bl	80013c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000eb6:	2308      	movs	r3, #8
 8000eb8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ec6:	f107 0310 	add.w	r3, r7, #16
 8000eca:	4619      	mov	r1, r3
 8000ecc:	480b      	ldr	r0, [pc, #44]	; (8000efc <MX_GPIO_Init+0xf4>)
 8000ece:	f000 fa77 	bl	80013c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000ed2:	2310      	movs	r3, #16
 8000ed4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eda:	2300      	movs	r3, #0
 8000edc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ede:	f107 0310 	add.w	r3, r7, #16
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	4805      	ldr	r0, [pc, #20]	; (8000efc <MX_GPIO_Init+0xf4>)
 8000ee6:	f000 fa6b 	bl	80013c0 <HAL_GPIO_Init>

}
 8000eea:	bf00      	nop
 8000eec:	3720      	adds	r7, #32
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	40021000 	.word	0x40021000
 8000ef8:	40010800 	.word	0x40010800
 8000efc:	40010c00 	.word	0x40010c00

08000f00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f04:	b672      	cpsid	i
}
 8000f06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f08:	e7fe      	b.n	8000f08 <Error_Handler+0x8>
	...

08000f0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b085      	sub	sp, #20
 8000f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f12:	4b15      	ldr	r3, [pc, #84]	; (8000f68 <HAL_MspInit+0x5c>)
 8000f14:	699b      	ldr	r3, [r3, #24]
 8000f16:	4a14      	ldr	r2, [pc, #80]	; (8000f68 <HAL_MspInit+0x5c>)
 8000f18:	f043 0301 	orr.w	r3, r3, #1
 8000f1c:	6193      	str	r3, [r2, #24]
 8000f1e:	4b12      	ldr	r3, [pc, #72]	; (8000f68 <HAL_MspInit+0x5c>)
 8000f20:	699b      	ldr	r3, [r3, #24]
 8000f22:	f003 0301 	and.w	r3, r3, #1
 8000f26:	60bb      	str	r3, [r7, #8]
 8000f28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f2a:	4b0f      	ldr	r3, [pc, #60]	; (8000f68 <HAL_MspInit+0x5c>)
 8000f2c:	69db      	ldr	r3, [r3, #28]
 8000f2e:	4a0e      	ldr	r2, [pc, #56]	; (8000f68 <HAL_MspInit+0x5c>)
 8000f30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f34:	61d3      	str	r3, [r2, #28]
 8000f36:	4b0c      	ldr	r3, [pc, #48]	; (8000f68 <HAL_MspInit+0x5c>)
 8000f38:	69db      	ldr	r3, [r3, #28]
 8000f3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f3e:	607b      	str	r3, [r7, #4]
 8000f40:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000f42:	4b0a      	ldr	r3, [pc, #40]	; (8000f6c <HAL_MspInit+0x60>)
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	60fb      	str	r3, [r7, #12]
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000f4e:	60fb      	str	r3, [r7, #12]
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f56:	60fb      	str	r3, [r7, #12]
 8000f58:	4a04      	ldr	r2, [pc, #16]	; (8000f6c <HAL_MspInit+0x60>)
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f5e:	bf00      	nop
 8000f60:	3714      	adds	r7, #20
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bc80      	pop	{r7}
 8000f66:	4770      	bx	lr
 8000f68:	40021000 	.word	0x40021000
 8000f6c:	40010000 	.word	0x40010000

08000f70 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b085      	sub	sp, #20
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a09      	ldr	r2, [pc, #36]	; (8000fa4 <HAL_TIM_Base_MspInit+0x34>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d10b      	bne.n	8000f9a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f82:	4b09      	ldr	r3, [pc, #36]	; (8000fa8 <HAL_TIM_Base_MspInit+0x38>)
 8000f84:	699b      	ldr	r3, [r3, #24]
 8000f86:	4a08      	ldr	r2, [pc, #32]	; (8000fa8 <HAL_TIM_Base_MspInit+0x38>)
 8000f88:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f8c:	6193      	str	r3, [r2, #24]
 8000f8e:	4b06      	ldr	r3, [pc, #24]	; (8000fa8 <HAL_TIM_Base_MspInit+0x38>)
 8000f90:	699b      	ldr	r3, [r3, #24]
 8000f92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f96:	60fb      	str	r3, [r7, #12]
 8000f98:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000f9a:	bf00      	nop
 8000f9c:	3714      	adds	r7, #20
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bc80      	pop	{r7}
 8000fa2:	4770      	bx	lr
 8000fa4:	40012c00 	.word	0x40012c00
 8000fa8:	40021000 	.word	0x40021000

08000fac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b088      	sub	sp, #32
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb4:	f107 0310 	add.w	r3, r7, #16
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]
 8000fbc:	605a      	str	r2, [r3, #4]
 8000fbe:	609a      	str	r2, [r3, #8]
 8000fc0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4a1c      	ldr	r2, [pc, #112]	; (8001038 <HAL_UART_MspInit+0x8c>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d131      	bne.n	8001030 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000fcc:	4b1b      	ldr	r3, [pc, #108]	; (800103c <HAL_UART_MspInit+0x90>)
 8000fce:	699b      	ldr	r3, [r3, #24]
 8000fd0:	4a1a      	ldr	r2, [pc, #104]	; (800103c <HAL_UART_MspInit+0x90>)
 8000fd2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fd6:	6193      	str	r3, [r2, #24]
 8000fd8:	4b18      	ldr	r3, [pc, #96]	; (800103c <HAL_UART_MspInit+0x90>)
 8000fda:	699b      	ldr	r3, [r3, #24]
 8000fdc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fe0:	60fb      	str	r3, [r7, #12]
 8000fe2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe4:	4b15      	ldr	r3, [pc, #84]	; (800103c <HAL_UART_MspInit+0x90>)
 8000fe6:	699b      	ldr	r3, [r3, #24]
 8000fe8:	4a14      	ldr	r2, [pc, #80]	; (800103c <HAL_UART_MspInit+0x90>)
 8000fea:	f043 0304 	orr.w	r3, r3, #4
 8000fee:	6193      	str	r3, [r2, #24]
 8000ff0:	4b12      	ldr	r3, [pc, #72]	; (800103c <HAL_UART_MspInit+0x90>)
 8000ff2:	699b      	ldr	r3, [r3, #24]
 8000ff4:	f003 0304 	and.w	r3, r3, #4
 8000ff8:	60bb      	str	r3, [r7, #8]
 8000ffa:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000ffc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001000:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001002:	2302      	movs	r3, #2
 8001004:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001006:	2303      	movs	r3, #3
 8001008:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800100a:	f107 0310 	add.w	r3, r7, #16
 800100e:	4619      	mov	r1, r3
 8001010:	480b      	ldr	r0, [pc, #44]	; (8001040 <HAL_UART_MspInit+0x94>)
 8001012:	f000 f9d5 	bl	80013c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001016:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800101a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800101c:	2300      	movs	r3, #0
 800101e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001020:	2300      	movs	r3, #0
 8001022:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001024:	f107 0310 	add.w	r3, r7, #16
 8001028:	4619      	mov	r1, r3
 800102a:	4805      	ldr	r0, [pc, #20]	; (8001040 <HAL_UART_MspInit+0x94>)
 800102c:	f000 f9c8 	bl	80013c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001030:	bf00      	nop
 8001032:	3720      	adds	r7, #32
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	40013800 	.word	0x40013800
 800103c:	40021000 	.word	0x40021000
 8001040:	40010800 	.word	0x40010800

08001044 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001048:	e7fe      	b.n	8001048 <NMI_Handler+0x4>

0800104a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800104a:	b480      	push	{r7}
 800104c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800104e:	e7fe      	b.n	800104e <HardFault_Handler+0x4>

08001050 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001054:	e7fe      	b.n	8001054 <MemManage_Handler+0x4>

08001056 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001056:	b480      	push	{r7}
 8001058:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800105a:	e7fe      	b.n	800105a <BusFault_Handler+0x4>

0800105c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001060:	e7fe      	b.n	8001060 <UsageFault_Handler+0x4>

08001062 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001062:	b480      	push	{r7}
 8001064:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001066:	bf00      	nop
 8001068:	46bd      	mov	sp, r7
 800106a:	bc80      	pop	{r7}
 800106c:	4770      	bx	lr

0800106e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800106e:	b480      	push	{r7}
 8001070:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001072:	bf00      	nop
 8001074:	46bd      	mov	sp, r7
 8001076:	bc80      	pop	{r7}
 8001078:	4770      	bx	lr

0800107a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800107a:	b480      	push	{r7}
 800107c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800107e:	bf00      	nop
 8001080:	46bd      	mov	sp, r7
 8001082:	bc80      	pop	{r7}
 8001084:	4770      	bx	lr

08001086 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001086:	b580      	push	{r7, lr}
 8001088:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800108a:	f000 f875 	bl	8001178 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800108e:	bf00      	nop
 8001090:	bd80      	pop	{r7, pc}

08001092 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001092:	b480      	push	{r7}
 8001094:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001096:	bf00      	nop
 8001098:	46bd      	mov	sp, r7
 800109a:	bc80      	pop	{r7}
 800109c:	4770      	bx	lr
	...

080010a0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010a0:	480c      	ldr	r0, [pc, #48]	; (80010d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010a2:	490d      	ldr	r1, [pc, #52]	; (80010d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010a4:	4a0d      	ldr	r2, [pc, #52]	; (80010dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010a8:	e002      	b.n	80010b0 <LoopCopyDataInit>

080010aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010ae:	3304      	adds	r3, #4

080010b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010b4:	d3f9      	bcc.n	80010aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010b6:	4a0a      	ldr	r2, [pc, #40]	; (80010e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010b8:	4c0a      	ldr	r4, [pc, #40]	; (80010e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80010ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010bc:	e001      	b.n	80010c2 <LoopFillZerobss>

080010be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010c0:	3204      	adds	r2, #4

080010c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010c4:	d3fb      	bcc.n	80010be <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80010c6:	f7ff ffe4 	bl	8001092 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010ca:	f001 fbb3 	bl	8002834 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010ce:	f7ff fd05 	bl	8000adc <main>
  bx lr
 80010d2:	4770      	bx	lr
  ldr r0, =_sdata
 80010d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010d8:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 80010dc:	080028d4 	.word	0x080028d4
  ldr r2, =_sbss
 80010e0:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 80010e4:	200000d8 	.word	0x200000d8

080010e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010e8:	e7fe      	b.n	80010e8 <ADC1_2_IRQHandler>
	...

080010ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010f0:	4b08      	ldr	r3, [pc, #32]	; (8001114 <HAL_Init+0x28>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a07      	ldr	r2, [pc, #28]	; (8001114 <HAL_Init+0x28>)
 80010f6:	f043 0310 	orr.w	r3, r3, #16
 80010fa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010fc:	2003      	movs	r0, #3
 80010fe:	f000 f92b 	bl	8001358 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001102:	200f      	movs	r0, #15
 8001104:	f000 f808 	bl	8001118 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001108:	f7ff ff00 	bl	8000f0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800110c:	2300      	movs	r3, #0
}
 800110e:	4618      	mov	r0, r3
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	40022000 	.word	0x40022000

08001118 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001120:	4b12      	ldr	r3, [pc, #72]	; (800116c <HAL_InitTick+0x54>)
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	4b12      	ldr	r3, [pc, #72]	; (8001170 <HAL_InitTick+0x58>)
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	4619      	mov	r1, r3
 800112a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800112e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001132:	fbb2 f3f3 	udiv	r3, r2, r3
 8001136:	4618      	mov	r0, r3
 8001138:	f000 f935 	bl	80013a6 <HAL_SYSTICK_Config>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001142:	2301      	movs	r3, #1
 8001144:	e00e      	b.n	8001164 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2b0f      	cmp	r3, #15
 800114a:	d80a      	bhi.n	8001162 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800114c:	2200      	movs	r2, #0
 800114e:	6879      	ldr	r1, [r7, #4]
 8001150:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001154:	f000 f90b 	bl	800136e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001158:	4a06      	ldr	r2, [pc, #24]	; (8001174 <HAL_InitTick+0x5c>)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800115e:	2300      	movs	r3, #0
 8001160:	e000      	b.n	8001164 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001162:	2301      	movs	r3, #1
}
 8001164:	4618      	mov	r0, r3
 8001166:	3708      	adds	r7, #8
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	2000000c 	.word	0x2000000c
 8001170:	20000014 	.word	0x20000014
 8001174:	20000010 	.word	0x20000010

08001178 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800117c:	4b05      	ldr	r3, [pc, #20]	; (8001194 <HAL_IncTick+0x1c>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	461a      	mov	r2, r3
 8001182:	4b05      	ldr	r3, [pc, #20]	; (8001198 <HAL_IncTick+0x20>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4413      	add	r3, r2
 8001188:	4a03      	ldr	r2, [pc, #12]	; (8001198 <HAL_IncTick+0x20>)
 800118a:	6013      	str	r3, [r2, #0]
}
 800118c:	bf00      	nop
 800118e:	46bd      	mov	sp, r7
 8001190:	bc80      	pop	{r7}
 8001192:	4770      	bx	lr
 8001194:	20000014 	.word	0x20000014
 8001198:	200000d4 	.word	0x200000d4

0800119c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  return uwTick;
 80011a0:	4b02      	ldr	r3, [pc, #8]	; (80011ac <HAL_GetTick+0x10>)
 80011a2:	681b      	ldr	r3, [r3, #0]
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bc80      	pop	{r7}
 80011aa:	4770      	bx	lr
 80011ac:	200000d4 	.word	0x200000d4

080011b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011b8:	f7ff fff0 	bl	800119c <HAL_GetTick>
 80011bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80011c8:	d005      	beq.n	80011d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011ca:	4b0a      	ldr	r3, [pc, #40]	; (80011f4 <HAL_Delay+0x44>)
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	461a      	mov	r2, r3
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	4413      	add	r3, r2
 80011d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011d6:	bf00      	nop
 80011d8:	f7ff ffe0 	bl	800119c <HAL_GetTick>
 80011dc:	4602      	mov	r2, r0
 80011de:	68bb      	ldr	r3, [r7, #8]
 80011e0:	1ad3      	subs	r3, r2, r3
 80011e2:	68fa      	ldr	r2, [r7, #12]
 80011e4:	429a      	cmp	r2, r3
 80011e6:	d8f7      	bhi.n	80011d8 <HAL_Delay+0x28>
  {
  }
}
 80011e8:	bf00      	nop
 80011ea:	bf00      	nop
 80011ec:	3710      	adds	r7, #16
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	20000014 	.word	0x20000014

080011f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b085      	sub	sp, #20
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	f003 0307 	and.w	r3, r3, #7
 8001206:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001208:	4b0c      	ldr	r3, [pc, #48]	; (800123c <__NVIC_SetPriorityGrouping+0x44>)
 800120a:	68db      	ldr	r3, [r3, #12]
 800120c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800120e:	68ba      	ldr	r2, [r7, #8]
 8001210:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001214:	4013      	ands	r3, r2
 8001216:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001220:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001224:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001228:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800122a:	4a04      	ldr	r2, [pc, #16]	; (800123c <__NVIC_SetPriorityGrouping+0x44>)
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	60d3      	str	r3, [r2, #12]
}
 8001230:	bf00      	nop
 8001232:	3714      	adds	r7, #20
 8001234:	46bd      	mov	sp, r7
 8001236:	bc80      	pop	{r7}
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	e000ed00 	.word	0xe000ed00

08001240 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001244:	4b04      	ldr	r3, [pc, #16]	; (8001258 <__NVIC_GetPriorityGrouping+0x18>)
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	0a1b      	lsrs	r3, r3, #8
 800124a:	f003 0307 	and.w	r3, r3, #7
}
 800124e:	4618      	mov	r0, r3
 8001250:	46bd      	mov	sp, r7
 8001252:	bc80      	pop	{r7}
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	e000ed00 	.word	0xe000ed00

0800125c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	4603      	mov	r3, r0
 8001264:	6039      	str	r1, [r7, #0]
 8001266:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001268:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126c:	2b00      	cmp	r3, #0
 800126e:	db0a      	blt.n	8001286 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	b2da      	uxtb	r2, r3
 8001274:	490c      	ldr	r1, [pc, #48]	; (80012a8 <__NVIC_SetPriority+0x4c>)
 8001276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800127a:	0112      	lsls	r2, r2, #4
 800127c:	b2d2      	uxtb	r2, r2
 800127e:	440b      	add	r3, r1
 8001280:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001284:	e00a      	b.n	800129c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	b2da      	uxtb	r2, r3
 800128a:	4908      	ldr	r1, [pc, #32]	; (80012ac <__NVIC_SetPriority+0x50>)
 800128c:	79fb      	ldrb	r3, [r7, #7]
 800128e:	f003 030f 	and.w	r3, r3, #15
 8001292:	3b04      	subs	r3, #4
 8001294:	0112      	lsls	r2, r2, #4
 8001296:	b2d2      	uxtb	r2, r2
 8001298:	440b      	add	r3, r1
 800129a:	761a      	strb	r2, [r3, #24]
}
 800129c:	bf00      	nop
 800129e:	370c      	adds	r7, #12
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bc80      	pop	{r7}
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	e000e100 	.word	0xe000e100
 80012ac:	e000ed00 	.word	0xe000ed00

080012b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b089      	sub	sp, #36	; 0x24
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	60f8      	str	r0, [r7, #12]
 80012b8:	60b9      	str	r1, [r7, #8]
 80012ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	f003 0307 	and.w	r3, r3, #7
 80012c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	f1c3 0307 	rsb	r3, r3, #7
 80012ca:	2b04      	cmp	r3, #4
 80012cc:	bf28      	it	cs
 80012ce:	2304      	movcs	r3, #4
 80012d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	3304      	adds	r3, #4
 80012d6:	2b06      	cmp	r3, #6
 80012d8:	d902      	bls.n	80012e0 <NVIC_EncodePriority+0x30>
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	3b03      	subs	r3, #3
 80012de:	e000      	b.n	80012e2 <NVIC_EncodePriority+0x32>
 80012e0:	2300      	movs	r3, #0
 80012e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80012e8:	69bb      	ldr	r3, [r7, #24]
 80012ea:	fa02 f303 	lsl.w	r3, r2, r3
 80012ee:	43da      	mvns	r2, r3
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	401a      	ands	r2, r3
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012f8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001302:	43d9      	mvns	r1, r3
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001308:	4313      	orrs	r3, r2
         );
}
 800130a:	4618      	mov	r0, r3
 800130c:	3724      	adds	r7, #36	; 0x24
 800130e:	46bd      	mov	sp, r7
 8001310:	bc80      	pop	{r7}
 8001312:	4770      	bx	lr

08001314 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	3b01      	subs	r3, #1
 8001320:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001324:	d301      	bcc.n	800132a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001326:	2301      	movs	r3, #1
 8001328:	e00f      	b.n	800134a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800132a:	4a0a      	ldr	r2, [pc, #40]	; (8001354 <SysTick_Config+0x40>)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	3b01      	subs	r3, #1
 8001330:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001332:	210f      	movs	r1, #15
 8001334:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001338:	f7ff ff90 	bl	800125c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800133c:	4b05      	ldr	r3, [pc, #20]	; (8001354 <SysTick_Config+0x40>)
 800133e:	2200      	movs	r2, #0
 8001340:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001342:	4b04      	ldr	r3, [pc, #16]	; (8001354 <SysTick_Config+0x40>)
 8001344:	2207      	movs	r2, #7
 8001346:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001348:	2300      	movs	r3, #0
}
 800134a:	4618      	mov	r0, r3
 800134c:	3708      	adds	r7, #8
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	e000e010 	.word	0xe000e010

08001358 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	f7ff ff49 	bl	80011f8 <__NVIC_SetPriorityGrouping>
}
 8001366:	bf00      	nop
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}

0800136e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800136e:	b580      	push	{r7, lr}
 8001370:	b086      	sub	sp, #24
 8001372:	af00      	add	r7, sp, #0
 8001374:	4603      	mov	r3, r0
 8001376:	60b9      	str	r1, [r7, #8]
 8001378:	607a      	str	r2, [r7, #4]
 800137a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800137c:	2300      	movs	r3, #0
 800137e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001380:	f7ff ff5e 	bl	8001240 <__NVIC_GetPriorityGrouping>
 8001384:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001386:	687a      	ldr	r2, [r7, #4]
 8001388:	68b9      	ldr	r1, [r7, #8]
 800138a:	6978      	ldr	r0, [r7, #20]
 800138c:	f7ff ff90 	bl	80012b0 <NVIC_EncodePriority>
 8001390:	4602      	mov	r2, r0
 8001392:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001396:	4611      	mov	r1, r2
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff ff5f 	bl	800125c <__NVIC_SetPriority>
}
 800139e:	bf00      	nop
 80013a0:	3718      	adds	r7, #24
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}

080013a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013a6:	b580      	push	{r7, lr}
 80013a8:	b082      	sub	sp, #8
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	f7ff ffb0 	bl	8001314 <SysTick_Config>
 80013b4:	4603      	mov	r3, r0
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3708      	adds	r7, #8
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
	...

080013c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b08b      	sub	sp, #44	; 0x2c
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
 80013c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013ca:	2300      	movs	r3, #0
 80013cc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80013ce:	2300      	movs	r3, #0
 80013d0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013d2:	e169      	b.n	80016a8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80013d4:	2201      	movs	r2, #1
 80013d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d8:	fa02 f303 	lsl.w	r3, r2, r3
 80013dc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	69fa      	ldr	r2, [r7, #28]
 80013e4:	4013      	ands	r3, r2
 80013e6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80013e8:	69ba      	ldr	r2, [r7, #24]
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	429a      	cmp	r2, r3
 80013ee:	f040 8158 	bne.w	80016a2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	4a9a      	ldr	r2, [pc, #616]	; (8001660 <HAL_GPIO_Init+0x2a0>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d05e      	beq.n	80014ba <HAL_GPIO_Init+0xfa>
 80013fc:	4a98      	ldr	r2, [pc, #608]	; (8001660 <HAL_GPIO_Init+0x2a0>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d875      	bhi.n	80014ee <HAL_GPIO_Init+0x12e>
 8001402:	4a98      	ldr	r2, [pc, #608]	; (8001664 <HAL_GPIO_Init+0x2a4>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d058      	beq.n	80014ba <HAL_GPIO_Init+0xfa>
 8001408:	4a96      	ldr	r2, [pc, #600]	; (8001664 <HAL_GPIO_Init+0x2a4>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d86f      	bhi.n	80014ee <HAL_GPIO_Init+0x12e>
 800140e:	4a96      	ldr	r2, [pc, #600]	; (8001668 <HAL_GPIO_Init+0x2a8>)
 8001410:	4293      	cmp	r3, r2
 8001412:	d052      	beq.n	80014ba <HAL_GPIO_Init+0xfa>
 8001414:	4a94      	ldr	r2, [pc, #592]	; (8001668 <HAL_GPIO_Init+0x2a8>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d869      	bhi.n	80014ee <HAL_GPIO_Init+0x12e>
 800141a:	4a94      	ldr	r2, [pc, #592]	; (800166c <HAL_GPIO_Init+0x2ac>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d04c      	beq.n	80014ba <HAL_GPIO_Init+0xfa>
 8001420:	4a92      	ldr	r2, [pc, #584]	; (800166c <HAL_GPIO_Init+0x2ac>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d863      	bhi.n	80014ee <HAL_GPIO_Init+0x12e>
 8001426:	4a92      	ldr	r2, [pc, #584]	; (8001670 <HAL_GPIO_Init+0x2b0>)
 8001428:	4293      	cmp	r3, r2
 800142a:	d046      	beq.n	80014ba <HAL_GPIO_Init+0xfa>
 800142c:	4a90      	ldr	r2, [pc, #576]	; (8001670 <HAL_GPIO_Init+0x2b0>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d85d      	bhi.n	80014ee <HAL_GPIO_Init+0x12e>
 8001432:	2b12      	cmp	r3, #18
 8001434:	d82a      	bhi.n	800148c <HAL_GPIO_Init+0xcc>
 8001436:	2b12      	cmp	r3, #18
 8001438:	d859      	bhi.n	80014ee <HAL_GPIO_Init+0x12e>
 800143a:	a201      	add	r2, pc, #4	; (adr r2, 8001440 <HAL_GPIO_Init+0x80>)
 800143c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001440:	080014bb 	.word	0x080014bb
 8001444:	08001495 	.word	0x08001495
 8001448:	080014a7 	.word	0x080014a7
 800144c:	080014e9 	.word	0x080014e9
 8001450:	080014ef 	.word	0x080014ef
 8001454:	080014ef 	.word	0x080014ef
 8001458:	080014ef 	.word	0x080014ef
 800145c:	080014ef 	.word	0x080014ef
 8001460:	080014ef 	.word	0x080014ef
 8001464:	080014ef 	.word	0x080014ef
 8001468:	080014ef 	.word	0x080014ef
 800146c:	080014ef 	.word	0x080014ef
 8001470:	080014ef 	.word	0x080014ef
 8001474:	080014ef 	.word	0x080014ef
 8001478:	080014ef 	.word	0x080014ef
 800147c:	080014ef 	.word	0x080014ef
 8001480:	080014ef 	.word	0x080014ef
 8001484:	0800149d 	.word	0x0800149d
 8001488:	080014b1 	.word	0x080014b1
 800148c:	4a79      	ldr	r2, [pc, #484]	; (8001674 <HAL_GPIO_Init+0x2b4>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d013      	beq.n	80014ba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001492:	e02c      	b.n	80014ee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	68db      	ldr	r3, [r3, #12]
 8001498:	623b      	str	r3, [r7, #32]
          break;
 800149a:	e029      	b.n	80014f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	68db      	ldr	r3, [r3, #12]
 80014a0:	3304      	adds	r3, #4
 80014a2:	623b      	str	r3, [r7, #32]
          break;
 80014a4:	e024      	b.n	80014f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	68db      	ldr	r3, [r3, #12]
 80014aa:	3308      	adds	r3, #8
 80014ac:	623b      	str	r3, [r7, #32]
          break;
 80014ae:	e01f      	b.n	80014f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	330c      	adds	r3, #12
 80014b6:	623b      	str	r3, [r7, #32]
          break;
 80014b8:	e01a      	b.n	80014f0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	689b      	ldr	r3, [r3, #8]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d102      	bne.n	80014c8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80014c2:	2304      	movs	r3, #4
 80014c4:	623b      	str	r3, [r7, #32]
          break;
 80014c6:	e013      	b.n	80014f0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d105      	bne.n	80014dc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014d0:	2308      	movs	r3, #8
 80014d2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	69fa      	ldr	r2, [r7, #28]
 80014d8:	611a      	str	r2, [r3, #16]
          break;
 80014da:	e009      	b.n	80014f0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014dc:	2308      	movs	r3, #8
 80014de:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	69fa      	ldr	r2, [r7, #28]
 80014e4:	615a      	str	r2, [r3, #20]
          break;
 80014e6:	e003      	b.n	80014f0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80014e8:	2300      	movs	r3, #0
 80014ea:	623b      	str	r3, [r7, #32]
          break;
 80014ec:	e000      	b.n	80014f0 <HAL_GPIO_Init+0x130>
          break;
 80014ee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80014f0:	69bb      	ldr	r3, [r7, #24]
 80014f2:	2bff      	cmp	r3, #255	; 0xff
 80014f4:	d801      	bhi.n	80014fa <HAL_GPIO_Init+0x13a>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	e001      	b.n	80014fe <HAL_GPIO_Init+0x13e>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	3304      	adds	r3, #4
 80014fe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001500:	69bb      	ldr	r3, [r7, #24]
 8001502:	2bff      	cmp	r3, #255	; 0xff
 8001504:	d802      	bhi.n	800150c <HAL_GPIO_Init+0x14c>
 8001506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001508:	009b      	lsls	r3, r3, #2
 800150a:	e002      	b.n	8001512 <HAL_GPIO_Init+0x152>
 800150c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800150e:	3b08      	subs	r3, #8
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	210f      	movs	r1, #15
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	fa01 f303 	lsl.w	r3, r1, r3
 8001520:	43db      	mvns	r3, r3
 8001522:	401a      	ands	r2, r3
 8001524:	6a39      	ldr	r1, [r7, #32]
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	fa01 f303 	lsl.w	r3, r1, r3
 800152c:	431a      	orrs	r2, r3
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800153a:	2b00      	cmp	r3, #0
 800153c:	f000 80b1 	beq.w	80016a2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001540:	4b4d      	ldr	r3, [pc, #308]	; (8001678 <HAL_GPIO_Init+0x2b8>)
 8001542:	699b      	ldr	r3, [r3, #24]
 8001544:	4a4c      	ldr	r2, [pc, #304]	; (8001678 <HAL_GPIO_Init+0x2b8>)
 8001546:	f043 0301 	orr.w	r3, r3, #1
 800154a:	6193      	str	r3, [r2, #24]
 800154c:	4b4a      	ldr	r3, [pc, #296]	; (8001678 <HAL_GPIO_Init+0x2b8>)
 800154e:	699b      	ldr	r3, [r3, #24]
 8001550:	f003 0301 	and.w	r3, r3, #1
 8001554:	60bb      	str	r3, [r7, #8]
 8001556:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001558:	4a48      	ldr	r2, [pc, #288]	; (800167c <HAL_GPIO_Init+0x2bc>)
 800155a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800155c:	089b      	lsrs	r3, r3, #2
 800155e:	3302      	adds	r3, #2
 8001560:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001564:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001568:	f003 0303 	and.w	r3, r3, #3
 800156c:	009b      	lsls	r3, r3, #2
 800156e:	220f      	movs	r2, #15
 8001570:	fa02 f303 	lsl.w	r3, r2, r3
 8001574:	43db      	mvns	r3, r3
 8001576:	68fa      	ldr	r2, [r7, #12]
 8001578:	4013      	ands	r3, r2
 800157a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	4a40      	ldr	r2, [pc, #256]	; (8001680 <HAL_GPIO_Init+0x2c0>)
 8001580:	4293      	cmp	r3, r2
 8001582:	d013      	beq.n	80015ac <HAL_GPIO_Init+0x1ec>
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	4a3f      	ldr	r2, [pc, #252]	; (8001684 <HAL_GPIO_Init+0x2c4>)
 8001588:	4293      	cmp	r3, r2
 800158a:	d00d      	beq.n	80015a8 <HAL_GPIO_Init+0x1e8>
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	4a3e      	ldr	r2, [pc, #248]	; (8001688 <HAL_GPIO_Init+0x2c8>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d007      	beq.n	80015a4 <HAL_GPIO_Init+0x1e4>
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	4a3d      	ldr	r2, [pc, #244]	; (800168c <HAL_GPIO_Init+0x2cc>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d101      	bne.n	80015a0 <HAL_GPIO_Init+0x1e0>
 800159c:	2303      	movs	r3, #3
 800159e:	e006      	b.n	80015ae <HAL_GPIO_Init+0x1ee>
 80015a0:	2304      	movs	r3, #4
 80015a2:	e004      	b.n	80015ae <HAL_GPIO_Init+0x1ee>
 80015a4:	2302      	movs	r3, #2
 80015a6:	e002      	b.n	80015ae <HAL_GPIO_Init+0x1ee>
 80015a8:	2301      	movs	r3, #1
 80015aa:	e000      	b.n	80015ae <HAL_GPIO_Init+0x1ee>
 80015ac:	2300      	movs	r3, #0
 80015ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015b0:	f002 0203 	and.w	r2, r2, #3
 80015b4:	0092      	lsls	r2, r2, #2
 80015b6:	4093      	lsls	r3, r2
 80015b8:	68fa      	ldr	r2, [r7, #12]
 80015ba:	4313      	orrs	r3, r2
 80015bc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80015be:	492f      	ldr	r1, [pc, #188]	; (800167c <HAL_GPIO_Init+0x2bc>)
 80015c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c2:	089b      	lsrs	r3, r3, #2
 80015c4:	3302      	adds	r3, #2
 80015c6:	68fa      	ldr	r2, [r7, #12]
 80015c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d006      	beq.n	80015e6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80015d8:	4b2d      	ldr	r3, [pc, #180]	; (8001690 <HAL_GPIO_Init+0x2d0>)
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	492c      	ldr	r1, [pc, #176]	; (8001690 <HAL_GPIO_Init+0x2d0>)
 80015de:	69bb      	ldr	r3, [r7, #24]
 80015e0:	4313      	orrs	r3, r2
 80015e2:	600b      	str	r3, [r1, #0]
 80015e4:	e006      	b.n	80015f4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80015e6:	4b2a      	ldr	r3, [pc, #168]	; (8001690 <HAL_GPIO_Init+0x2d0>)
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	69bb      	ldr	r3, [r7, #24]
 80015ec:	43db      	mvns	r3, r3
 80015ee:	4928      	ldr	r1, [pc, #160]	; (8001690 <HAL_GPIO_Init+0x2d0>)
 80015f0:	4013      	ands	r3, r2
 80015f2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d006      	beq.n	800160e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001600:	4b23      	ldr	r3, [pc, #140]	; (8001690 <HAL_GPIO_Init+0x2d0>)
 8001602:	685a      	ldr	r2, [r3, #4]
 8001604:	4922      	ldr	r1, [pc, #136]	; (8001690 <HAL_GPIO_Init+0x2d0>)
 8001606:	69bb      	ldr	r3, [r7, #24]
 8001608:	4313      	orrs	r3, r2
 800160a:	604b      	str	r3, [r1, #4]
 800160c:	e006      	b.n	800161c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800160e:	4b20      	ldr	r3, [pc, #128]	; (8001690 <HAL_GPIO_Init+0x2d0>)
 8001610:	685a      	ldr	r2, [r3, #4]
 8001612:	69bb      	ldr	r3, [r7, #24]
 8001614:	43db      	mvns	r3, r3
 8001616:	491e      	ldr	r1, [pc, #120]	; (8001690 <HAL_GPIO_Init+0x2d0>)
 8001618:	4013      	ands	r3, r2
 800161a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001624:	2b00      	cmp	r3, #0
 8001626:	d006      	beq.n	8001636 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001628:	4b19      	ldr	r3, [pc, #100]	; (8001690 <HAL_GPIO_Init+0x2d0>)
 800162a:	689a      	ldr	r2, [r3, #8]
 800162c:	4918      	ldr	r1, [pc, #96]	; (8001690 <HAL_GPIO_Init+0x2d0>)
 800162e:	69bb      	ldr	r3, [r7, #24]
 8001630:	4313      	orrs	r3, r2
 8001632:	608b      	str	r3, [r1, #8]
 8001634:	e006      	b.n	8001644 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001636:	4b16      	ldr	r3, [pc, #88]	; (8001690 <HAL_GPIO_Init+0x2d0>)
 8001638:	689a      	ldr	r2, [r3, #8]
 800163a:	69bb      	ldr	r3, [r7, #24]
 800163c:	43db      	mvns	r3, r3
 800163e:	4914      	ldr	r1, [pc, #80]	; (8001690 <HAL_GPIO_Init+0x2d0>)
 8001640:	4013      	ands	r3, r2
 8001642:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800164c:	2b00      	cmp	r3, #0
 800164e:	d021      	beq.n	8001694 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001650:	4b0f      	ldr	r3, [pc, #60]	; (8001690 <HAL_GPIO_Init+0x2d0>)
 8001652:	68da      	ldr	r2, [r3, #12]
 8001654:	490e      	ldr	r1, [pc, #56]	; (8001690 <HAL_GPIO_Init+0x2d0>)
 8001656:	69bb      	ldr	r3, [r7, #24]
 8001658:	4313      	orrs	r3, r2
 800165a:	60cb      	str	r3, [r1, #12]
 800165c:	e021      	b.n	80016a2 <HAL_GPIO_Init+0x2e2>
 800165e:	bf00      	nop
 8001660:	10320000 	.word	0x10320000
 8001664:	10310000 	.word	0x10310000
 8001668:	10220000 	.word	0x10220000
 800166c:	10210000 	.word	0x10210000
 8001670:	10120000 	.word	0x10120000
 8001674:	10110000 	.word	0x10110000
 8001678:	40021000 	.word	0x40021000
 800167c:	40010000 	.word	0x40010000
 8001680:	40010800 	.word	0x40010800
 8001684:	40010c00 	.word	0x40010c00
 8001688:	40011000 	.word	0x40011000
 800168c:	40011400 	.word	0x40011400
 8001690:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001694:	4b0b      	ldr	r3, [pc, #44]	; (80016c4 <HAL_GPIO_Init+0x304>)
 8001696:	68da      	ldr	r2, [r3, #12]
 8001698:	69bb      	ldr	r3, [r7, #24]
 800169a:	43db      	mvns	r3, r3
 800169c:	4909      	ldr	r1, [pc, #36]	; (80016c4 <HAL_GPIO_Init+0x304>)
 800169e:	4013      	ands	r3, r2
 80016a0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80016a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a4:	3301      	adds	r3, #1
 80016a6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ae:	fa22 f303 	lsr.w	r3, r2, r3
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	f47f ae8e 	bne.w	80013d4 <HAL_GPIO_Init+0x14>
  }
}
 80016b8:	bf00      	nop
 80016ba:	bf00      	nop
 80016bc:	372c      	adds	r7, #44	; 0x2c
 80016be:	46bd      	mov	sp, r7
 80016c0:	bc80      	pop	{r7}
 80016c2:	4770      	bx	lr
 80016c4:	40010400 	.word	0x40010400

080016c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b085      	sub	sp, #20
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	460b      	mov	r3, r1
 80016d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	689a      	ldr	r2, [r3, #8]
 80016d8:	887b      	ldrh	r3, [r7, #2]
 80016da:	4013      	ands	r3, r2
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d002      	beq.n	80016e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80016e0:	2301      	movs	r3, #1
 80016e2:	73fb      	strb	r3, [r7, #15]
 80016e4:	e001      	b.n	80016ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80016e6:	2300      	movs	r3, #0
 80016e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80016ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	3714      	adds	r7, #20
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bc80      	pop	{r7}
 80016f4:	4770      	bx	lr

080016f6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016f6:	b480      	push	{r7}
 80016f8:	b083      	sub	sp, #12
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	6078      	str	r0, [r7, #4]
 80016fe:	460b      	mov	r3, r1
 8001700:	807b      	strh	r3, [r7, #2]
 8001702:	4613      	mov	r3, r2
 8001704:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001706:	787b      	ldrb	r3, [r7, #1]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d003      	beq.n	8001714 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800170c:	887a      	ldrh	r2, [r7, #2]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001712:	e003      	b.n	800171c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001714:	887b      	ldrh	r3, [r7, #2]
 8001716:	041a      	lsls	r2, r3, #16
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	611a      	str	r2, [r3, #16]
}
 800171c:	bf00      	nop
 800171e:	370c      	adds	r7, #12
 8001720:	46bd      	mov	sp, r7
 8001722:	bc80      	pop	{r7}
 8001724:	4770      	bx	lr
	...

08001728 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b086      	sub	sp, #24
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d101      	bne.n	800173a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	e272      	b.n	8001c20 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f003 0301 	and.w	r3, r3, #1
 8001742:	2b00      	cmp	r3, #0
 8001744:	f000 8087 	beq.w	8001856 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001748:	4b92      	ldr	r3, [pc, #584]	; (8001994 <HAL_RCC_OscConfig+0x26c>)
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f003 030c 	and.w	r3, r3, #12
 8001750:	2b04      	cmp	r3, #4
 8001752:	d00c      	beq.n	800176e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001754:	4b8f      	ldr	r3, [pc, #572]	; (8001994 <HAL_RCC_OscConfig+0x26c>)
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f003 030c 	and.w	r3, r3, #12
 800175c:	2b08      	cmp	r3, #8
 800175e:	d112      	bne.n	8001786 <HAL_RCC_OscConfig+0x5e>
 8001760:	4b8c      	ldr	r3, [pc, #560]	; (8001994 <HAL_RCC_OscConfig+0x26c>)
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001768:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800176c:	d10b      	bne.n	8001786 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800176e:	4b89      	ldr	r3, [pc, #548]	; (8001994 <HAL_RCC_OscConfig+0x26c>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001776:	2b00      	cmp	r3, #0
 8001778:	d06c      	beq.n	8001854 <HAL_RCC_OscConfig+0x12c>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d168      	bne.n	8001854 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e24c      	b.n	8001c20 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800178e:	d106      	bne.n	800179e <HAL_RCC_OscConfig+0x76>
 8001790:	4b80      	ldr	r3, [pc, #512]	; (8001994 <HAL_RCC_OscConfig+0x26c>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a7f      	ldr	r2, [pc, #508]	; (8001994 <HAL_RCC_OscConfig+0x26c>)
 8001796:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800179a:	6013      	str	r3, [r2, #0]
 800179c:	e02e      	b.n	80017fc <HAL_RCC_OscConfig+0xd4>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d10c      	bne.n	80017c0 <HAL_RCC_OscConfig+0x98>
 80017a6:	4b7b      	ldr	r3, [pc, #492]	; (8001994 <HAL_RCC_OscConfig+0x26c>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a7a      	ldr	r2, [pc, #488]	; (8001994 <HAL_RCC_OscConfig+0x26c>)
 80017ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017b0:	6013      	str	r3, [r2, #0]
 80017b2:	4b78      	ldr	r3, [pc, #480]	; (8001994 <HAL_RCC_OscConfig+0x26c>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a77      	ldr	r2, [pc, #476]	; (8001994 <HAL_RCC_OscConfig+0x26c>)
 80017b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017bc:	6013      	str	r3, [r2, #0]
 80017be:	e01d      	b.n	80017fc <HAL_RCC_OscConfig+0xd4>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017c8:	d10c      	bne.n	80017e4 <HAL_RCC_OscConfig+0xbc>
 80017ca:	4b72      	ldr	r3, [pc, #456]	; (8001994 <HAL_RCC_OscConfig+0x26c>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a71      	ldr	r2, [pc, #452]	; (8001994 <HAL_RCC_OscConfig+0x26c>)
 80017d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017d4:	6013      	str	r3, [r2, #0]
 80017d6:	4b6f      	ldr	r3, [pc, #444]	; (8001994 <HAL_RCC_OscConfig+0x26c>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a6e      	ldr	r2, [pc, #440]	; (8001994 <HAL_RCC_OscConfig+0x26c>)
 80017dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017e0:	6013      	str	r3, [r2, #0]
 80017e2:	e00b      	b.n	80017fc <HAL_RCC_OscConfig+0xd4>
 80017e4:	4b6b      	ldr	r3, [pc, #428]	; (8001994 <HAL_RCC_OscConfig+0x26c>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a6a      	ldr	r2, [pc, #424]	; (8001994 <HAL_RCC_OscConfig+0x26c>)
 80017ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017ee:	6013      	str	r3, [r2, #0]
 80017f0:	4b68      	ldr	r3, [pc, #416]	; (8001994 <HAL_RCC_OscConfig+0x26c>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a67      	ldr	r2, [pc, #412]	; (8001994 <HAL_RCC_OscConfig+0x26c>)
 80017f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017fa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d013      	beq.n	800182c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001804:	f7ff fcca 	bl	800119c <HAL_GetTick>
 8001808:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800180a:	e008      	b.n	800181e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800180c:	f7ff fcc6 	bl	800119c <HAL_GetTick>
 8001810:	4602      	mov	r2, r0
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	2b64      	cmp	r3, #100	; 0x64
 8001818:	d901      	bls.n	800181e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800181a:	2303      	movs	r3, #3
 800181c:	e200      	b.n	8001c20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800181e:	4b5d      	ldr	r3, [pc, #372]	; (8001994 <HAL_RCC_OscConfig+0x26c>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001826:	2b00      	cmp	r3, #0
 8001828:	d0f0      	beq.n	800180c <HAL_RCC_OscConfig+0xe4>
 800182a:	e014      	b.n	8001856 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800182c:	f7ff fcb6 	bl	800119c <HAL_GetTick>
 8001830:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001832:	e008      	b.n	8001846 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001834:	f7ff fcb2 	bl	800119c <HAL_GetTick>
 8001838:	4602      	mov	r2, r0
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	2b64      	cmp	r3, #100	; 0x64
 8001840:	d901      	bls.n	8001846 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001842:	2303      	movs	r3, #3
 8001844:	e1ec      	b.n	8001c20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001846:	4b53      	ldr	r3, [pc, #332]	; (8001994 <HAL_RCC_OscConfig+0x26c>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d1f0      	bne.n	8001834 <HAL_RCC_OscConfig+0x10c>
 8001852:	e000      	b.n	8001856 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001854:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 0302 	and.w	r3, r3, #2
 800185e:	2b00      	cmp	r3, #0
 8001860:	d063      	beq.n	800192a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001862:	4b4c      	ldr	r3, [pc, #304]	; (8001994 <HAL_RCC_OscConfig+0x26c>)
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	f003 030c 	and.w	r3, r3, #12
 800186a:	2b00      	cmp	r3, #0
 800186c:	d00b      	beq.n	8001886 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800186e:	4b49      	ldr	r3, [pc, #292]	; (8001994 <HAL_RCC_OscConfig+0x26c>)
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	f003 030c 	and.w	r3, r3, #12
 8001876:	2b08      	cmp	r3, #8
 8001878:	d11c      	bne.n	80018b4 <HAL_RCC_OscConfig+0x18c>
 800187a:	4b46      	ldr	r3, [pc, #280]	; (8001994 <HAL_RCC_OscConfig+0x26c>)
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001882:	2b00      	cmp	r3, #0
 8001884:	d116      	bne.n	80018b4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001886:	4b43      	ldr	r3, [pc, #268]	; (8001994 <HAL_RCC_OscConfig+0x26c>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 0302 	and.w	r3, r3, #2
 800188e:	2b00      	cmp	r3, #0
 8001890:	d005      	beq.n	800189e <HAL_RCC_OscConfig+0x176>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	691b      	ldr	r3, [r3, #16]
 8001896:	2b01      	cmp	r3, #1
 8001898:	d001      	beq.n	800189e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	e1c0      	b.n	8001c20 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800189e:	4b3d      	ldr	r3, [pc, #244]	; (8001994 <HAL_RCC_OscConfig+0x26c>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	695b      	ldr	r3, [r3, #20]
 80018aa:	00db      	lsls	r3, r3, #3
 80018ac:	4939      	ldr	r1, [pc, #228]	; (8001994 <HAL_RCC_OscConfig+0x26c>)
 80018ae:	4313      	orrs	r3, r2
 80018b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018b2:	e03a      	b.n	800192a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	691b      	ldr	r3, [r3, #16]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d020      	beq.n	80018fe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018bc:	4b36      	ldr	r3, [pc, #216]	; (8001998 <HAL_RCC_OscConfig+0x270>)
 80018be:	2201      	movs	r2, #1
 80018c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018c2:	f7ff fc6b 	bl	800119c <HAL_GetTick>
 80018c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018c8:	e008      	b.n	80018dc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018ca:	f7ff fc67 	bl	800119c <HAL_GetTick>
 80018ce:	4602      	mov	r2, r0
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	1ad3      	subs	r3, r2, r3
 80018d4:	2b02      	cmp	r3, #2
 80018d6:	d901      	bls.n	80018dc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80018d8:	2303      	movs	r3, #3
 80018da:	e1a1      	b.n	8001c20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018dc:	4b2d      	ldr	r3, [pc, #180]	; (8001994 <HAL_RCC_OscConfig+0x26c>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f003 0302 	and.w	r3, r3, #2
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d0f0      	beq.n	80018ca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018e8:	4b2a      	ldr	r3, [pc, #168]	; (8001994 <HAL_RCC_OscConfig+0x26c>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	695b      	ldr	r3, [r3, #20]
 80018f4:	00db      	lsls	r3, r3, #3
 80018f6:	4927      	ldr	r1, [pc, #156]	; (8001994 <HAL_RCC_OscConfig+0x26c>)
 80018f8:	4313      	orrs	r3, r2
 80018fa:	600b      	str	r3, [r1, #0]
 80018fc:	e015      	b.n	800192a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018fe:	4b26      	ldr	r3, [pc, #152]	; (8001998 <HAL_RCC_OscConfig+0x270>)
 8001900:	2200      	movs	r2, #0
 8001902:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001904:	f7ff fc4a 	bl	800119c <HAL_GetTick>
 8001908:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800190a:	e008      	b.n	800191e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800190c:	f7ff fc46 	bl	800119c <HAL_GetTick>
 8001910:	4602      	mov	r2, r0
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	2b02      	cmp	r3, #2
 8001918:	d901      	bls.n	800191e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800191a:	2303      	movs	r3, #3
 800191c:	e180      	b.n	8001c20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800191e:	4b1d      	ldr	r3, [pc, #116]	; (8001994 <HAL_RCC_OscConfig+0x26c>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 0302 	and.w	r3, r3, #2
 8001926:	2b00      	cmp	r3, #0
 8001928:	d1f0      	bne.n	800190c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 0308 	and.w	r3, r3, #8
 8001932:	2b00      	cmp	r3, #0
 8001934:	d03a      	beq.n	80019ac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	699b      	ldr	r3, [r3, #24]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d019      	beq.n	8001972 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800193e:	4b17      	ldr	r3, [pc, #92]	; (800199c <HAL_RCC_OscConfig+0x274>)
 8001940:	2201      	movs	r2, #1
 8001942:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001944:	f7ff fc2a 	bl	800119c <HAL_GetTick>
 8001948:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800194a:	e008      	b.n	800195e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800194c:	f7ff fc26 	bl	800119c <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	2b02      	cmp	r3, #2
 8001958:	d901      	bls.n	800195e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e160      	b.n	8001c20 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800195e:	4b0d      	ldr	r3, [pc, #52]	; (8001994 <HAL_RCC_OscConfig+0x26c>)
 8001960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001962:	f003 0302 	and.w	r3, r3, #2
 8001966:	2b00      	cmp	r3, #0
 8001968:	d0f0      	beq.n	800194c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800196a:	2001      	movs	r0, #1
 800196c:	f000 fad8 	bl	8001f20 <RCC_Delay>
 8001970:	e01c      	b.n	80019ac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001972:	4b0a      	ldr	r3, [pc, #40]	; (800199c <HAL_RCC_OscConfig+0x274>)
 8001974:	2200      	movs	r2, #0
 8001976:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001978:	f7ff fc10 	bl	800119c <HAL_GetTick>
 800197c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800197e:	e00f      	b.n	80019a0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001980:	f7ff fc0c 	bl	800119c <HAL_GetTick>
 8001984:	4602      	mov	r2, r0
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	2b02      	cmp	r3, #2
 800198c:	d908      	bls.n	80019a0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800198e:	2303      	movs	r3, #3
 8001990:	e146      	b.n	8001c20 <HAL_RCC_OscConfig+0x4f8>
 8001992:	bf00      	nop
 8001994:	40021000 	.word	0x40021000
 8001998:	42420000 	.word	0x42420000
 800199c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019a0:	4b92      	ldr	r3, [pc, #584]	; (8001bec <HAL_RCC_OscConfig+0x4c4>)
 80019a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a4:	f003 0302 	and.w	r3, r3, #2
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d1e9      	bne.n	8001980 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 0304 	and.w	r3, r3, #4
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	f000 80a6 	beq.w	8001b06 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019ba:	2300      	movs	r3, #0
 80019bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019be:	4b8b      	ldr	r3, [pc, #556]	; (8001bec <HAL_RCC_OscConfig+0x4c4>)
 80019c0:	69db      	ldr	r3, [r3, #28]
 80019c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d10d      	bne.n	80019e6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019ca:	4b88      	ldr	r3, [pc, #544]	; (8001bec <HAL_RCC_OscConfig+0x4c4>)
 80019cc:	69db      	ldr	r3, [r3, #28]
 80019ce:	4a87      	ldr	r2, [pc, #540]	; (8001bec <HAL_RCC_OscConfig+0x4c4>)
 80019d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019d4:	61d3      	str	r3, [r2, #28]
 80019d6:	4b85      	ldr	r3, [pc, #532]	; (8001bec <HAL_RCC_OscConfig+0x4c4>)
 80019d8:	69db      	ldr	r3, [r3, #28]
 80019da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019de:	60bb      	str	r3, [r7, #8]
 80019e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019e2:	2301      	movs	r3, #1
 80019e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019e6:	4b82      	ldr	r3, [pc, #520]	; (8001bf0 <HAL_RCC_OscConfig+0x4c8>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d118      	bne.n	8001a24 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019f2:	4b7f      	ldr	r3, [pc, #508]	; (8001bf0 <HAL_RCC_OscConfig+0x4c8>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a7e      	ldr	r2, [pc, #504]	; (8001bf0 <HAL_RCC_OscConfig+0x4c8>)
 80019f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019fe:	f7ff fbcd 	bl	800119c <HAL_GetTick>
 8001a02:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a04:	e008      	b.n	8001a18 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a06:	f7ff fbc9 	bl	800119c <HAL_GetTick>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	1ad3      	subs	r3, r2, r3
 8001a10:	2b64      	cmp	r3, #100	; 0x64
 8001a12:	d901      	bls.n	8001a18 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001a14:	2303      	movs	r3, #3
 8001a16:	e103      	b.n	8001c20 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a18:	4b75      	ldr	r3, [pc, #468]	; (8001bf0 <HAL_RCC_OscConfig+0x4c8>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d0f0      	beq.n	8001a06 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d106      	bne.n	8001a3a <HAL_RCC_OscConfig+0x312>
 8001a2c:	4b6f      	ldr	r3, [pc, #444]	; (8001bec <HAL_RCC_OscConfig+0x4c4>)
 8001a2e:	6a1b      	ldr	r3, [r3, #32]
 8001a30:	4a6e      	ldr	r2, [pc, #440]	; (8001bec <HAL_RCC_OscConfig+0x4c4>)
 8001a32:	f043 0301 	orr.w	r3, r3, #1
 8001a36:	6213      	str	r3, [r2, #32]
 8001a38:	e02d      	b.n	8001a96 <HAL_RCC_OscConfig+0x36e>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	68db      	ldr	r3, [r3, #12]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d10c      	bne.n	8001a5c <HAL_RCC_OscConfig+0x334>
 8001a42:	4b6a      	ldr	r3, [pc, #424]	; (8001bec <HAL_RCC_OscConfig+0x4c4>)
 8001a44:	6a1b      	ldr	r3, [r3, #32]
 8001a46:	4a69      	ldr	r2, [pc, #420]	; (8001bec <HAL_RCC_OscConfig+0x4c4>)
 8001a48:	f023 0301 	bic.w	r3, r3, #1
 8001a4c:	6213      	str	r3, [r2, #32]
 8001a4e:	4b67      	ldr	r3, [pc, #412]	; (8001bec <HAL_RCC_OscConfig+0x4c4>)
 8001a50:	6a1b      	ldr	r3, [r3, #32]
 8001a52:	4a66      	ldr	r2, [pc, #408]	; (8001bec <HAL_RCC_OscConfig+0x4c4>)
 8001a54:	f023 0304 	bic.w	r3, r3, #4
 8001a58:	6213      	str	r3, [r2, #32]
 8001a5a:	e01c      	b.n	8001a96 <HAL_RCC_OscConfig+0x36e>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	2b05      	cmp	r3, #5
 8001a62:	d10c      	bne.n	8001a7e <HAL_RCC_OscConfig+0x356>
 8001a64:	4b61      	ldr	r3, [pc, #388]	; (8001bec <HAL_RCC_OscConfig+0x4c4>)
 8001a66:	6a1b      	ldr	r3, [r3, #32]
 8001a68:	4a60      	ldr	r2, [pc, #384]	; (8001bec <HAL_RCC_OscConfig+0x4c4>)
 8001a6a:	f043 0304 	orr.w	r3, r3, #4
 8001a6e:	6213      	str	r3, [r2, #32]
 8001a70:	4b5e      	ldr	r3, [pc, #376]	; (8001bec <HAL_RCC_OscConfig+0x4c4>)
 8001a72:	6a1b      	ldr	r3, [r3, #32]
 8001a74:	4a5d      	ldr	r2, [pc, #372]	; (8001bec <HAL_RCC_OscConfig+0x4c4>)
 8001a76:	f043 0301 	orr.w	r3, r3, #1
 8001a7a:	6213      	str	r3, [r2, #32]
 8001a7c:	e00b      	b.n	8001a96 <HAL_RCC_OscConfig+0x36e>
 8001a7e:	4b5b      	ldr	r3, [pc, #364]	; (8001bec <HAL_RCC_OscConfig+0x4c4>)
 8001a80:	6a1b      	ldr	r3, [r3, #32]
 8001a82:	4a5a      	ldr	r2, [pc, #360]	; (8001bec <HAL_RCC_OscConfig+0x4c4>)
 8001a84:	f023 0301 	bic.w	r3, r3, #1
 8001a88:	6213      	str	r3, [r2, #32]
 8001a8a:	4b58      	ldr	r3, [pc, #352]	; (8001bec <HAL_RCC_OscConfig+0x4c4>)
 8001a8c:	6a1b      	ldr	r3, [r3, #32]
 8001a8e:	4a57      	ldr	r2, [pc, #348]	; (8001bec <HAL_RCC_OscConfig+0x4c4>)
 8001a90:	f023 0304 	bic.w	r3, r3, #4
 8001a94:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	68db      	ldr	r3, [r3, #12]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d015      	beq.n	8001aca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a9e:	f7ff fb7d 	bl	800119c <HAL_GetTick>
 8001aa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001aa4:	e00a      	b.n	8001abc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aa6:	f7ff fb79 	bl	800119c <HAL_GetTick>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	1ad3      	subs	r3, r2, r3
 8001ab0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d901      	bls.n	8001abc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001ab8:	2303      	movs	r3, #3
 8001aba:	e0b1      	b.n	8001c20 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001abc:	4b4b      	ldr	r3, [pc, #300]	; (8001bec <HAL_RCC_OscConfig+0x4c4>)
 8001abe:	6a1b      	ldr	r3, [r3, #32]
 8001ac0:	f003 0302 	and.w	r3, r3, #2
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d0ee      	beq.n	8001aa6 <HAL_RCC_OscConfig+0x37e>
 8001ac8:	e014      	b.n	8001af4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aca:	f7ff fb67 	bl	800119c <HAL_GetTick>
 8001ace:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ad0:	e00a      	b.n	8001ae8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ad2:	f7ff fb63 	bl	800119c <HAL_GetTick>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	1ad3      	subs	r3, r2, r3
 8001adc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d901      	bls.n	8001ae8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001ae4:	2303      	movs	r3, #3
 8001ae6:	e09b      	b.n	8001c20 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ae8:	4b40      	ldr	r3, [pc, #256]	; (8001bec <HAL_RCC_OscConfig+0x4c4>)
 8001aea:	6a1b      	ldr	r3, [r3, #32]
 8001aec:	f003 0302 	and.w	r3, r3, #2
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d1ee      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001af4:	7dfb      	ldrb	r3, [r7, #23]
 8001af6:	2b01      	cmp	r3, #1
 8001af8:	d105      	bne.n	8001b06 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001afa:	4b3c      	ldr	r3, [pc, #240]	; (8001bec <HAL_RCC_OscConfig+0x4c4>)
 8001afc:	69db      	ldr	r3, [r3, #28]
 8001afe:	4a3b      	ldr	r2, [pc, #236]	; (8001bec <HAL_RCC_OscConfig+0x4c4>)
 8001b00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b04:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	69db      	ldr	r3, [r3, #28]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	f000 8087 	beq.w	8001c1e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b10:	4b36      	ldr	r3, [pc, #216]	; (8001bec <HAL_RCC_OscConfig+0x4c4>)
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f003 030c 	and.w	r3, r3, #12
 8001b18:	2b08      	cmp	r3, #8
 8001b1a:	d061      	beq.n	8001be0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	69db      	ldr	r3, [r3, #28]
 8001b20:	2b02      	cmp	r3, #2
 8001b22:	d146      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b24:	4b33      	ldr	r3, [pc, #204]	; (8001bf4 <HAL_RCC_OscConfig+0x4cc>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b2a:	f7ff fb37 	bl	800119c <HAL_GetTick>
 8001b2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b30:	e008      	b.n	8001b44 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b32:	f7ff fb33 	bl	800119c <HAL_GetTick>
 8001b36:	4602      	mov	r2, r0
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	1ad3      	subs	r3, r2, r3
 8001b3c:	2b02      	cmp	r3, #2
 8001b3e:	d901      	bls.n	8001b44 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001b40:	2303      	movs	r3, #3
 8001b42:	e06d      	b.n	8001c20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b44:	4b29      	ldr	r3, [pc, #164]	; (8001bec <HAL_RCC_OscConfig+0x4c4>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d1f0      	bne.n	8001b32 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6a1b      	ldr	r3, [r3, #32]
 8001b54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b58:	d108      	bne.n	8001b6c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b5a:	4b24      	ldr	r3, [pc, #144]	; (8001bec <HAL_RCC_OscConfig+0x4c4>)
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	4921      	ldr	r1, [pc, #132]	; (8001bec <HAL_RCC_OscConfig+0x4c4>)
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b6c:	4b1f      	ldr	r3, [pc, #124]	; (8001bec <HAL_RCC_OscConfig+0x4c4>)
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6a19      	ldr	r1, [r3, #32]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b7c:	430b      	orrs	r3, r1
 8001b7e:	491b      	ldr	r1, [pc, #108]	; (8001bec <HAL_RCC_OscConfig+0x4c4>)
 8001b80:	4313      	orrs	r3, r2
 8001b82:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b84:	4b1b      	ldr	r3, [pc, #108]	; (8001bf4 <HAL_RCC_OscConfig+0x4cc>)
 8001b86:	2201      	movs	r2, #1
 8001b88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b8a:	f7ff fb07 	bl	800119c <HAL_GetTick>
 8001b8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b90:	e008      	b.n	8001ba4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b92:	f7ff fb03 	bl	800119c <HAL_GetTick>
 8001b96:	4602      	mov	r2, r0
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	1ad3      	subs	r3, r2, r3
 8001b9c:	2b02      	cmp	r3, #2
 8001b9e:	d901      	bls.n	8001ba4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001ba0:	2303      	movs	r3, #3
 8001ba2:	e03d      	b.n	8001c20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ba4:	4b11      	ldr	r3, [pc, #68]	; (8001bec <HAL_RCC_OscConfig+0x4c4>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d0f0      	beq.n	8001b92 <HAL_RCC_OscConfig+0x46a>
 8001bb0:	e035      	b.n	8001c1e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bb2:	4b10      	ldr	r3, [pc, #64]	; (8001bf4 <HAL_RCC_OscConfig+0x4cc>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bb8:	f7ff faf0 	bl	800119c <HAL_GetTick>
 8001bbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bbe:	e008      	b.n	8001bd2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bc0:	f7ff faec 	bl	800119c <HAL_GetTick>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	2b02      	cmp	r3, #2
 8001bcc:	d901      	bls.n	8001bd2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	e026      	b.n	8001c20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bd2:	4b06      	ldr	r3, [pc, #24]	; (8001bec <HAL_RCC_OscConfig+0x4c4>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d1f0      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x498>
 8001bde:	e01e      	b.n	8001c1e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	69db      	ldr	r3, [r3, #28]
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d107      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e019      	b.n	8001c20 <HAL_RCC_OscConfig+0x4f8>
 8001bec:	40021000 	.word	0x40021000
 8001bf0:	40007000 	.word	0x40007000
 8001bf4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001bf8:	4b0b      	ldr	r3, [pc, #44]	; (8001c28 <HAL_RCC_OscConfig+0x500>)
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6a1b      	ldr	r3, [r3, #32]
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d106      	bne.n	8001c1a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d001      	beq.n	8001c1e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e000      	b.n	8001c20 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001c1e:	2300      	movs	r3, #0
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3718      	adds	r7, #24
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	40021000 	.word	0x40021000

08001c2c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b084      	sub	sp, #16
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d101      	bne.n	8001c40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e0d0      	b.n	8001de2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c40:	4b6a      	ldr	r3, [pc, #424]	; (8001dec <HAL_RCC_ClockConfig+0x1c0>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f003 0307 	and.w	r3, r3, #7
 8001c48:	683a      	ldr	r2, [r7, #0]
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d910      	bls.n	8001c70 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c4e:	4b67      	ldr	r3, [pc, #412]	; (8001dec <HAL_RCC_ClockConfig+0x1c0>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f023 0207 	bic.w	r2, r3, #7
 8001c56:	4965      	ldr	r1, [pc, #404]	; (8001dec <HAL_RCC_ClockConfig+0x1c0>)
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c5e:	4b63      	ldr	r3, [pc, #396]	; (8001dec <HAL_RCC_ClockConfig+0x1c0>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 0307 	and.w	r3, r3, #7
 8001c66:	683a      	ldr	r2, [r7, #0]
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d001      	beq.n	8001c70 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e0b8      	b.n	8001de2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f003 0302 	and.w	r3, r3, #2
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d020      	beq.n	8001cbe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 0304 	and.w	r3, r3, #4
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d005      	beq.n	8001c94 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c88:	4b59      	ldr	r3, [pc, #356]	; (8001df0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	4a58      	ldr	r2, [pc, #352]	; (8001df0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c8e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001c92:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 0308 	and.w	r3, r3, #8
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d005      	beq.n	8001cac <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ca0:	4b53      	ldr	r3, [pc, #332]	; (8001df0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	4a52      	ldr	r2, [pc, #328]	; (8001df0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ca6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001caa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cac:	4b50      	ldr	r3, [pc, #320]	; (8001df0 <HAL_RCC_ClockConfig+0x1c4>)
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	494d      	ldr	r1, [pc, #308]	; (8001df0 <HAL_RCC_ClockConfig+0x1c4>)
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 0301 	and.w	r3, r3, #1
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d040      	beq.n	8001d4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d107      	bne.n	8001ce2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cd2:	4b47      	ldr	r3, [pc, #284]	; (8001df0 <HAL_RCC_ClockConfig+0x1c4>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d115      	bne.n	8001d0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e07f      	b.n	8001de2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	2b02      	cmp	r3, #2
 8001ce8:	d107      	bne.n	8001cfa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cea:	4b41      	ldr	r3, [pc, #260]	; (8001df0 <HAL_RCC_ClockConfig+0x1c4>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d109      	bne.n	8001d0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e073      	b.n	8001de2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cfa:	4b3d      	ldr	r3, [pc, #244]	; (8001df0 <HAL_RCC_ClockConfig+0x1c4>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 0302 	and.w	r3, r3, #2
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d101      	bne.n	8001d0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e06b      	b.n	8001de2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d0a:	4b39      	ldr	r3, [pc, #228]	; (8001df0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	f023 0203 	bic.w	r2, r3, #3
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	4936      	ldr	r1, [pc, #216]	; (8001df0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d1c:	f7ff fa3e 	bl	800119c <HAL_GetTick>
 8001d20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d22:	e00a      	b.n	8001d3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d24:	f7ff fa3a 	bl	800119c <HAL_GetTick>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d901      	bls.n	8001d3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d36:	2303      	movs	r3, #3
 8001d38:	e053      	b.n	8001de2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d3a:	4b2d      	ldr	r3, [pc, #180]	; (8001df0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	f003 020c 	and.w	r2, r3, #12
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d1eb      	bne.n	8001d24 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d4c:	4b27      	ldr	r3, [pc, #156]	; (8001dec <HAL_RCC_ClockConfig+0x1c0>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 0307 	and.w	r3, r3, #7
 8001d54:	683a      	ldr	r2, [r7, #0]
 8001d56:	429a      	cmp	r2, r3
 8001d58:	d210      	bcs.n	8001d7c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d5a:	4b24      	ldr	r3, [pc, #144]	; (8001dec <HAL_RCC_ClockConfig+0x1c0>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f023 0207 	bic.w	r2, r3, #7
 8001d62:	4922      	ldr	r1, [pc, #136]	; (8001dec <HAL_RCC_ClockConfig+0x1c0>)
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	4313      	orrs	r3, r2
 8001d68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d6a:	4b20      	ldr	r3, [pc, #128]	; (8001dec <HAL_RCC_ClockConfig+0x1c0>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 0307 	and.w	r3, r3, #7
 8001d72:	683a      	ldr	r2, [r7, #0]
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d001      	beq.n	8001d7c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e032      	b.n	8001de2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f003 0304 	and.w	r3, r3, #4
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d008      	beq.n	8001d9a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d88:	4b19      	ldr	r3, [pc, #100]	; (8001df0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	4916      	ldr	r1, [pc, #88]	; (8001df0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d96:	4313      	orrs	r3, r2
 8001d98:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 0308 	and.w	r3, r3, #8
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d009      	beq.n	8001dba <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001da6:	4b12      	ldr	r3, [pc, #72]	; (8001df0 <HAL_RCC_ClockConfig+0x1c4>)
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	691b      	ldr	r3, [r3, #16]
 8001db2:	00db      	lsls	r3, r3, #3
 8001db4:	490e      	ldr	r1, [pc, #56]	; (8001df0 <HAL_RCC_ClockConfig+0x1c4>)
 8001db6:	4313      	orrs	r3, r2
 8001db8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001dba:	f000 f821 	bl	8001e00 <HAL_RCC_GetSysClockFreq>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	4b0b      	ldr	r3, [pc, #44]	; (8001df0 <HAL_RCC_ClockConfig+0x1c4>)
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	091b      	lsrs	r3, r3, #4
 8001dc6:	f003 030f 	and.w	r3, r3, #15
 8001dca:	490a      	ldr	r1, [pc, #40]	; (8001df4 <HAL_RCC_ClockConfig+0x1c8>)
 8001dcc:	5ccb      	ldrb	r3, [r1, r3]
 8001dce:	fa22 f303 	lsr.w	r3, r2, r3
 8001dd2:	4a09      	ldr	r2, [pc, #36]	; (8001df8 <HAL_RCC_ClockConfig+0x1cc>)
 8001dd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001dd6:	4b09      	ldr	r3, [pc, #36]	; (8001dfc <HAL_RCC_ClockConfig+0x1d0>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f7ff f99c 	bl	8001118 <HAL_InitTick>

  return HAL_OK;
 8001de0:	2300      	movs	r3, #0
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3710      	adds	r7, #16
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	40022000 	.word	0x40022000
 8001df0:	40021000 	.word	0x40021000
 8001df4:	080028b4 	.word	0x080028b4
 8001df8:	2000000c 	.word	0x2000000c
 8001dfc:	20000010 	.word	0x20000010

08001e00 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e00:	b490      	push	{r4, r7}
 8001e02:	b08a      	sub	sp, #40	; 0x28
 8001e04:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001e06:	4b29      	ldr	r3, [pc, #164]	; (8001eac <HAL_RCC_GetSysClockFreq+0xac>)
 8001e08:	1d3c      	adds	r4, r7, #4
 8001e0a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e0c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001e10:	f240 2301 	movw	r3, #513	; 0x201
 8001e14:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e16:	2300      	movs	r3, #0
 8001e18:	61fb      	str	r3, [r7, #28]
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	61bb      	str	r3, [r7, #24]
 8001e1e:	2300      	movs	r3, #0
 8001e20:	627b      	str	r3, [r7, #36]	; 0x24
 8001e22:	2300      	movs	r3, #0
 8001e24:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001e26:	2300      	movs	r3, #0
 8001e28:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001e2a:	4b21      	ldr	r3, [pc, #132]	; (8001eb0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	f003 030c 	and.w	r3, r3, #12
 8001e36:	2b04      	cmp	r3, #4
 8001e38:	d002      	beq.n	8001e40 <HAL_RCC_GetSysClockFreq+0x40>
 8001e3a:	2b08      	cmp	r3, #8
 8001e3c:	d003      	beq.n	8001e46 <HAL_RCC_GetSysClockFreq+0x46>
 8001e3e:	e02b      	b.n	8001e98 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e40:	4b1c      	ldr	r3, [pc, #112]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001e42:	623b      	str	r3, [r7, #32]
      break;
 8001e44:	e02b      	b.n	8001e9e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	0c9b      	lsrs	r3, r3, #18
 8001e4a:	f003 030f 	and.w	r3, r3, #15
 8001e4e:	3328      	adds	r3, #40	; 0x28
 8001e50:	443b      	add	r3, r7
 8001e52:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001e56:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d012      	beq.n	8001e88 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001e62:	4b13      	ldr	r3, [pc, #76]	; (8001eb0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	0c5b      	lsrs	r3, r3, #17
 8001e68:	f003 0301 	and.w	r3, r3, #1
 8001e6c:	3328      	adds	r3, #40	; 0x28
 8001e6e:	443b      	add	r3, r7
 8001e70:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001e74:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	4a0e      	ldr	r2, [pc, #56]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001e7a:	fb03 f202 	mul.w	r2, r3, r2
 8001e7e:	69bb      	ldr	r3, [r7, #24]
 8001e80:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e84:	627b      	str	r3, [r7, #36]	; 0x24
 8001e86:	e004      	b.n	8001e92 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	4a0b      	ldr	r2, [pc, #44]	; (8001eb8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e8c:	fb02 f303 	mul.w	r3, r2, r3
 8001e90:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e94:	623b      	str	r3, [r7, #32]
      break;
 8001e96:	e002      	b.n	8001e9e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e98:	4b06      	ldr	r3, [pc, #24]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001e9a:	623b      	str	r3, [r7, #32]
      break;
 8001e9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e9e:	6a3b      	ldr	r3, [r7, #32]
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3728      	adds	r7, #40	; 0x28
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bc90      	pop	{r4, r7}
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	080028a4 	.word	0x080028a4
 8001eb0:	40021000 	.word	0x40021000
 8001eb4:	007a1200 	.word	0x007a1200
 8001eb8:	003d0900 	.word	0x003d0900

08001ebc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ec0:	4b02      	ldr	r3, [pc, #8]	; (8001ecc <HAL_RCC_GetHCLKFreq+0x10>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bc80      	pop	{r7}
 8001eca:	4770      	bx	lr
 8001ecc:	2000000c 	.word	0x2000000c

08001ed0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ed4:	f7ff fff2 	bl	8001ebc <HAL_RCC_GetHCLKFreq>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	4b05      	ldr	r3, [pc, #20]	; (8001ef0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	0a1b      	lsrs	r3, r3, #8
 8001ee0:	f003 0307 	and.w	r3, r3, #7
 8001ee4:	4903      	ldr	r1, [pc, #12]	; (8001ef4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ee6:	5ccb      	ldrb	r3, [r1, r3]
 8001ee8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	40021000 	.word	0x40021000
 8001ef4:	080028c4 	.word	0x080028c4

08001ef8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001efc:	f7ff ffde 	bl	8001ebc <HAL_RCC_GetHCLKFreq>
 8001f00:	4602      	mov	r2, r0
 8001f02:	4b05      	ldr	r3, [pc, #20]	; (8001f18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	0adb      	lsrs	r3, r3, #11
 8001f08:	f003 0307 	and.w	r3, r3, #7
 8001f0c:	4903      	ldr	r1, [pc, #12]	; (8001f1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f0e:	5ccb      	ldrb	r3, [r1, r3]
 8001f10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	40021000 	.word	0x40021000
 8001f1c:	080028c4 	.word	0x080028c4

08001f20 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b085      	sub	sp, #20
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001f28:	4b0a      	ldr	r3, [pc, #40]	; (8001f54 <RCC_Delay+0x34>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a0a      	ldr	r2, [pc, #40]	; (8001f58 <RCC_Delay+0x38>)
 8001f2e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f32:	0a5b      	lsrs	r3, r3, #9
 8001f34:	687a      	ldr	r2, [r7, #4]
 8001f36:	fb02 f303 	mul.w	r3, r2, r3
 8001f3a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001f3c:	bf00      	nop
  }
  while (Delay --);
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	1e5a      	subs	r2, r3, #1
 8001f42:	60fa      	str	r2, [r7, #12]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d1f9      	bne.n	8001f3c <RCC_Delay+0x1c>
}
 8001f48:	bf00      	nop
 8001f4a:	bf00      	nop
 8001f4c:	3714      	adds	r7, #20
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bc80      	pop	{r7}
 8001f52:	4770      	bx	lr
 8001f54:	2000000c 	.word	0x2000000c
 8001f58:	10624dd3 	.word	0x10624dd3

08001f5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d101      	bne.n	8001f6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e041      	b.n	8001ff2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d106      	bne.n	8001f88 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f7fe fff4 	bl	8000f70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2202      	movs	r2, #2
 8001f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	3304      	adds	r3, #4
 8001f98:	4619      	mov	r1, r3
 8001f9a:	4610      	mov	r0, r2
 8001f9c:	f000 f93c 	bl	8002218 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2201      	movs	r2, #1
 8001fac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2201      	movs	r2, #1
 8001fbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2201      	movs	r2, #1
 8001fcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2201      	movs	r2, #1
 8001fdc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2201      	movs	r2, #1
 8001fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ff0:	2300      	movs	r3, #0
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3708      	adds	r7, #8
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
	...

08001ffc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b085      	sub	sp, #20
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800200a:	b2db      	uxtb	r3, r3
 800200c:	2b01      	cmp	r3, #1
 800200e:	d001      	beq.n	8002014 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	e032      	b.n	800207a <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2202      	movs	r2, #2
 8002018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a18      	ldr	r2, [pc, #96]	; (8002084 <HAL_TIM_Base_Start+0x88>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d00e      	beq.n	8002044 <HAL_TIM_Base_Start+0x48>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800202e:	d009      	beq.n	8002044 <HAL_TIM_Base_Start+0x48>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a14      	ldr	r2, [pc, #80]	; (8002088 <HAL_TIM_Base_Start+0x8c>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d004      	beq.n	8002044 <HAL_TIM_Base_Start+0x48>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a13      	ldr	r2, [pc, #76]	; (800208c <HAL_TIM_Base_Start+0x90>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d111      	bne.n	8002068 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	f003 0307 	and.w	r3, r3, #7
 800204e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	2b06      	cmp	r3, #6
 8002054:	d010      	beq.n	8002078 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f042 0201 	orr.w	r2, r2, #1
 8002064:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002066:	e007      	b.n	8002078 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f042 0201 	orr.w	r2, r2, #1
 8002076:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002078:	2300      	movs	r3, #0
}
 800207a:	4618      	mov	r0, r3
 800207c:	3714      	adds	r7, #20
 800207e:	46bd      	mov	sp, r7
 8002080:	bc80      	pop	{r7}
 8002082:	4770      	bx	lr
 8002084:	40012c00 	.word	0x40012c00
 8002088:	40000400 	.word	0x40000400
 800208c:	40000800 	.word	0x40000800

08002090 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b084      	sub	sp, #16
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d101      	bne.n	80020a8 <HAL_TIM_ConfigClockSource+0x18>
 80020a4:	2302      	movs	r3, #2
 80020a6:	e0b3      	b.n	8002210 <HAL_TIM_ConfigClockSource+0x180>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2201      	movs	r2, #1
 80020ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2202      	movs	r2, #2
 80020b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80020c6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80020ce:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	68fa      	ldr	r2, [r7, #12]
 80020d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020e0:	d03e      	beq.n	8002160 <HAL_TIM_ConfigClockSource+0xd0>
 80020e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020e6:	f200 8087 	bhi.w	80021f8 <HAL_TIM_ConfigClockSource+0x168>
 80020ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020ee:	f000 8085 	beq.w	80021fc <HAL_TIM_ConfigClockSource+0x16c>
 80020f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020f6:	d87f      	bhi.n	80021f8 <HAL_TIM_ConfigClockSource+0x168>
 80020f8:	2b70      	cmp	r3, #112	; 0x70
 80020fa:	d01a      	beq.n	8002132 <HAL_TIM_ConfigClockSource+0xa2>
 80020fc:	2b70      	cmp	r3, #112	; 0x70
 80020fe:	d87b      	bhi.n	80021f8 <HAL_TIM_ConfigClockSource+0x168>
 8002100:	2b60      	cmp	r3, #96	; 0x60
 8002102:	d050      	beq.n	80021a6 <HAL_TIM_ConfigClockSource+0x116>
 8002104:	2b60      	cmp	r3, #96	; 0x60
 8002106:	d877      	bhi.n	80021f8 <HAL_TIM_ConfigClockSource+0x168>
 8002108:	2b50      	cmp	r3, #80	; 0x50
 800210a:	d03c      	beq.n	8002186 <HAL_TIM_ConfigClockSource+0xf6>
 800210c:	2b50      	cmp	r3, #80	; 0x50
 800210e:	d873      	bhi.n	80021f8 <HAL_TIM_ConfigClockSource+0x168>
 8002110:	2b40      	cmp	r3, #64	; 0x40
 8002112:	d058      	beq.n	80021c6 <HAL_TIM_ConfigClockSource+0x136>
 8002114:	2b40      	cmp	r3, #64	; 0x40
 8002116:	d86f      	bhi.n	80021f8 <HAL_TIM_ConfigClockSource+0x168>
 8002118:	2b30      	cmp	r3, #48	; 0x30
 800211a:	d064      	beq.n	80021e6 <HAL_TIM_ConfigClockSource+0x156>
 800211c:	2b30      	cmp	r3, #48	; 0x30
 800211e:	d86b      	bhi.n	80021f8 <HAL_TIM_ConfigClockSource+0x168>
 8002120:	2b20      	cmp	r3, #32
 8002122:	d060      	beq.n	80021e6 <HAL_TIM_ConfigClockSource+0x156>
 8002124:	2b20      	cmp	r3, #32
 8002126:	d867      	bhi.n	80021f8 <HAL_TIM_ConfigClockSource+0x168>
 8002128:	2b00      	cmp	r3, #0
 800212a:	d05c      	beq.n	80021e6 <HAL_TIM_ConfigClockSource+0x156>
 800212c:	2b10      	cmp	r3, #16
 800212e:	d05a      	beq.n	80021e6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002130:	e062      	b.n	80021f8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6818      	ldr	r0, [r3, #0]
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	6899      	ldr	r1, [r3, #8]
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	685a      	ldr	r2, [r3, #4]
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	68db      	ldr	r3, [r3, #12]
 8002142:	f000 f942 	bl	80023ca <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002154:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	68fa      	ldr	r2, [r7, #12]
 800215c:	609a      	str	r2, [r3, #8]
      break;
 800215e:	e04e      	b.n	80021fe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6818      	ldr	r0, [r3, #0]
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	6899      	ldr	r1, [r3, #8]
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	685a      	ldr	r2, [r3, #4]
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	f000 f92b 	bl	80023ca <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	689a      	ldr	r2, [r3, #8]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002182:	609a      	str	r2, [r3, #8]
      break;
 8002184:	e03b      	b.n	80021fe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6818      	ldr	r0, [r3, #0]
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	6859      	ldr	r1, [r3, #4]
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	68db      	ldr	r3, [r3, #12]
 8002192:	461a      	mov	r2, r3
 8002194:	f000 f8a2 	bl	80022dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	2150      	movs	r1, #80	; 0x50
 800219e:	4618      	mov	r0, r3
 80021a0:	f000 f8f9 	bl	8002396 <TIM_ITRx_SetConfig>
      break;
 80021a4:	e02b      	b.n	80021fe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6818      	ldr	r0, [r3, #0]
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	6859      	ldr	r1, [r3, #4]
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	68db      	ldr	r3, [r3, #12]
 80021b2:	461a      	mov	r2, r3
 80021b4:	f000 f8c0 	bl	8002338 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	2160      	movs	r1, #96	; 0x60
 80021be:	4618      	mov	r0, r3
 80021c0:	f000 f8e9 	bl	8002396 <TIM_ITRx_SetConfig>
      break;
 80021c4:	e01b      	b.n	80021fe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6818      	ldr	r0, [r3, #0]
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	6859      	ldr	r1, [r3, #4]
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	68db      	ldr	r3, [r3, #12]
 80021d2:	461a      	mov	r2, r3
 80021d4:	f000 f882 	bl	80022dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	2140      	movs	r1, #64	; 0x40
 80021de:	4618      	mov	r0, r3
 80021e0:	f000 f8d9 	bl	8002396 <TIM_ITRx_SetConfig>
      break;
 80021e4:	e00b      	b.n	80021fe <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4619      	mov	r1, r3
 80021f0:	4610      	mov	r0, r2
 80021f2:	f000 f8d0 	bl	8002396 <TIM_ITRx_SetConfig>
        break;
 80021f6:	e002      	b.n	80021fe <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80021f8:	bf00      	nop
 80021fa:	e000      	b.n	80021fe <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80021fc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2201      	movs	r2, #1
 8002202:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2200      	movs	r2, #0
 800220a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800220e:	2300      	movs	r3, #0
}
 8002210:	4618      	mov	r0, r3
 8002212:	3710      	adds	r7, #16
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}

08002218 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002218:	b480      	push	{r7}
 800221a:	b085      	sub	sp, #20
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	4a29      	ldr	r2, [pc, #164]	; (80022d0 <TIM_Base_SetConfig+0xb8>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d00b      	beq.n	8002248 <TIM_Base_SetConfig+0x30>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002236:	d007      	beq.n	8002248 <TIM_Base_SetConfig+0x30>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	4a26      	ldr	r2, [pc, #152]	; (80022d4 <TIM_Base_SetConfig+0xbc>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d003      	beq.n	8002248 <TIM_Base_SetConfig+0x30>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	4a25      	ldr	r2, [pc, #148]	; (80022d8 <TIM_Base_SetConfig+0xc0>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d108      	bne.n	800225a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800224e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	68fa      	ldr	r2, [r7, #12]
 8002256:	4313      	orrs	r3, r2
 8002258:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4a1c      	ldr	r2, [pc, #112]	; (80022d0 <TIM_Base_SetConfig+0xb8>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d00b      	beq.n	800227a <TIM_Base_SetConfig+0x62>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002268:	d007      	beq.n	800227a <TIM_Base_SetConfig+0x62>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a19      	ldr	r2, [pc, #100]	; (80022d4 <TIM_Base_SetConfig+0xbc>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d003      	beq.n	800227a <TIM_Base_SetConfig+0x62>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4a18      	ldr	r2, [pc, #96]	; (80022d8 <TIM_Base_SetConfig+0xc0>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d108      	bne.n	800228c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002280:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	68db      	ldr	r3, [r3, #12]
 8002286:	68fa      	ldr	r2, [r7, #12]
 8002288:	4313      	orrs	r3, r2
 800228a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	695b      	ldr	r3, [r3, #20]
 8002296:	4313      	orrs	r3, r2
 8002298:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	68fa      	ldr	r2, [r7, #12]
 800229e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	689a      	ldr	r2, [r3, #8]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	4a07      	ldr	r2, [pc, #28]	; (80022d0 <TIM_Base_SetConfig+0xb8>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d103      	bne.n	80022c0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	691a      	ldr	r2, [r3, #16]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2201      	movs	r2, #1
 80022c4:	615a      	str	r2, [r3, #20]
}
 80022c6:	bf00      	nop
 80022c8:	3714      	adds	r7, #20
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bc80      	pop	{r7}
 80022ce:	4770      	bx	lr
 80022d0:	40012c00 	.word	0x40012c00
 80022d4:	40000400 	.word	0x40000400
 80022d8:	40000800 	.word	0x40000800

080022dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80022dc:	b480      	push	{r7}
 80022de:	b087      	sub	sp, #28
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	60f8      	str	r0, [r7, #12]
 80022e4:	60b9      	str	r1, [r7, #8]
 80022e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	6a1b      	ldr	r3, [r3, #32]
 80022ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	6a1b      	ldr	r3, [r3, #32]
 80022f2:	f023 0201 	bic.w	r2, r3, #1
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	699b      	ldr	r3, [r3, #24]
 80022fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002306:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	011b      	lsls	r3, r3, #4
 800230c:	693a      	ldr	r2, [r7, #16]
 800230e:	4313      	orrs	r3, r2
 8002310:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	f023 030a 	bic.w	r3, r3, #10
 8002318:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800231a:	697a      	ldr	r2, [r7, #20]
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	4313      	orrs	r3, r2
 8002320:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	693a      	ldr	r2, [r7, #16]
 8002326:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	697a      	ldr	r2, [r7, #20]
 800232c:	621a      	str	r2, [r3, #32]
}
 800232e:	bf00      	nop
 8002330:	371c      	adds	r7, #28
 8002332:	46bd      	mov	sp, r7
 8002334:	bc80      	pop	{r7}
 8002336:	4770      	bx	lr

08002338 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002338:	b480      	push	{r7}
 800233a:	b087      	sub	sp, #28
 800233c:	af00      	add	r7, sp, #0
 800233e:	60f8      	str	r0, [r7, #12]
 8002340:	60b9      	str	r1, [r7, #8]
 8002342:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	6a1b      	ldr	r3, [r3, #32]
 8002348:	f023 0210 	bic.w	r2, r3, #16
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	699b      	ldr	r3, [r3, #24]
 8002354:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	6a1b      	ldr	r3, [r3, #32]
 800235a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002362:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	031b      	lsls	r3, r3, #12
 8002368:	697a      	ldr	r2, [r7, #20]
 800236a:	4313      	orrs	r3, r2
 800236c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002374:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	011b      	lsls	r3, r3, #4
 800237a:	693a      	ldr	r2, [r7, #16]
 800237c:	4313      	orrs	r3, r2
 800237e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	697a      	ldr	r2, [r7, #20]
 8002384:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	693a      	ldr	r2, [r7, #16]
 800238a:	621a      	str	r2, [r3, #32]
}
 800238c:	bf00      	nop
 800238e:	371c      	adds	r7, #28
 8002390:	46bd      	mov	sp, r7
 8002392:	bc80      	pop	{r7}
 8002394:	4770      	bx	lr

08002396 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002396:	b480      	push	{r7}
 8002398:	b085      	sub	sp, #20
 800239a:	af00      	add	r7, sp, #0
 800239c:	6078      	str	r0, [r7, #4]
 800239e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80023ae:	683a      	ldr	r2, [r7, #0]
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	4313      	orrs	r3, r2
 80023b4:	f043 0307 	orr.w	r3, r3, #7
 80023b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	68fa      	ldr	r2, [r7, #12]
 80023be:	609a      	str	r2, [r3, #8]
}
 80023c0:	bf00      	nop
 80023c2:	3714      	adds	r7, #20
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bc80      	pop	{r7}
 80023c8:	4770      	bx	lr

080023ca <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80023ca:	b480      	push	{r7}
 80023cc:	b087      	sub	sp, #28
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	60f8      	str	r0, [r7, #12]
 80023d2:	60b9      	str	r1, [r7, #8]
 80023d4:	607a      	str	r2, [r7, #4]
 80023d6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80023e4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	021a      	lsls	r2, r3, #8
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	431a      	orrs	r2, r3
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	4313      	orrs	r3, r2
 80023f2:	697a      	ldr	r2, [r7, #20]
 80023f4:	4313      	orrs	r3, r2
 80023f6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	697a      	ldr	r2, [r7, #20]
 80023fc:	609a      	str	r2, [r3, #8]
}
 80023fe:	bf00      	nop
 8002400:	371c      	adds	r7, #28
 8002402:	46bd      	mov	sp, r7
 8002404:	bc80      	pop	{r7}
 8002406:	4770      	bx	lr

08002408 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002408:	b480      	push	{r7}
 800240a:	b085      	sub	sp, #20
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002418:	2b01      	cmp	r3, #1
 800241a:	d101      	bne.n	8002420 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800241c:	2302      	movs	r3, #2
 800241e:	e046      	b.n	80024ae <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2201      	movs	r2, #1
 8002424:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2202      	movs	r2, #2
 800242c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002446:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	68fa      	ldr	r2, [r7, #12]
 800244e:	4313      	orrs	r3, r2
 8002450:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	68fa      	ldr	r2, [r7, #12]
 8002458:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a16      	ldr	r2, [pc, #88]	; (80024b8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d00e      	beq.n	8002482 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800246c:	d009      	beq.n	8002482 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a12      	ldr	r2, [pc, #72]	; (80024bc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d004      	beq.n	8002482 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a10      	ldr	r2, [pc, #64]	; (80024c0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d10c      	bne.n	800249c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002488:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	68ba      	ldr	r2, [r7, #8]
 8002490:	4313      	orrs	r3, r2
 8002492:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	68ba      	ldr	r2, [r7, #8]
 800249a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2201      	movs	r2, #1
 80024a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2200      	movs	r2, #0
 80024a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80024ac:	2300      	movs	r3, #0
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3714      	adds	r7, #20
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bc80      	pop	{r7}
 80024b6:	4770      	bx	lr
 80024b8:	40012c00 	.word	0x40012c00
 80024bc:	40000400 	.word	0x40000400
 80024c0:	40000800 	.word	0x40000800

080024c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d101      	bne.n	80024d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e03f      	b.n	8002556 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d106      	bne.n	80024f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2200      	movs	r2, #0
 80024e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f7fe fd5e 	bl	8000fac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2224      	movs	r2, #36	; 0x24
 80024f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	68da      	ldr	r2, [r3, #12]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002506:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002508:	6878      	ldr	r0, [r7, #4]
 800250a:	f000 f905 	bl	8002718 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	691a      	ldr	r2, [r3, #16]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800251c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	695a      	ldr	r2, [r3, #20]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800252c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	68da      	ldr	r2, [r3, #12]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800253c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2200      	movs	r2, #0
 8002542:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2220      	movs	r2, #32
 8002548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2220      	movs	r2, #32
 8002550:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002554:	2300      	movs	r3, #0
}
 8002556:	4618      	mov	r0, r3
 8002558:	3708      	adds	r7, #8
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}

0800255e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800255e:	b580      	push	{r7, lr}
 8002560:	b08a      	sub	sp, #40	; 0x28
 8002562:	af02      	add	r7, sp, #8
 8002564:	60f8      	str	r0, [r7, #12]
 8002566:	60b9      	str	r1, [r7, #8]
 8002568:	603b      	str	r3, [r7, #0]
 800256a:	4613      	mov	r3, r2
 800256c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800256e:	2300      	movs	r3, #0
 8002570:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002578:	b2db      	uxtb	r3, r3
 800257a:	2b20      	cmp	r3, #32
 800257c:	d17c      	bne.n	8002678 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d002      	beq.n	800258a <HAL_UART_Transmit+0x2c>
 8002584:	88fb      	ldrh	r3, [r7, #6]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d101      	bne.n	800258e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e075      	b.n	800267a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002594:	2b01      	cmp	r3, #1
 8002596:	d101      	bne.n	800259c <HAL_UART_Transmit+0x3e>
 8002598:	2302      	movs	r3, #2
 800259a:	e06e      	b.n	800267a <HAL_UART_Transmit+0x11c>
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	2201      	movs	r2, #1
 80025a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	2200      	movs	r2, #0
 80025a8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	2221      	movs	r2, #33	; 0x21
 80025ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80025b2:	f7fe fdf3 	bl	800119c <HAL_GetTick>
 80025b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	88fa      	ldrh	r2, [r7, #6]
 80025bc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	88fa      	ldrh	r2, [r7, #6]
 80025c2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025cc:	d108      	bne.n	80025e0 <HAL_UART_Transmit+0x82>
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	691b      	ldr	r3, [r3, #16]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d104      	bne.n	80025e0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80025d6:	2300      	movs	r3, #0
 80025d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	61bb      	str	r3, [r7, #24]
 80025de:	e003      	b.n	80025e8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80025e4:	2300      	movs	r3, #0
 80025e6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2200      	movs	r2, #0
 80025ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80025f0:	e02a      	b.n	8002648 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	9300      	str	r3, [sp, #0]
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	2200      	movs	r2, #0
 80025fa:	2180      	movs	r1, #128	; 0x80
 80025fc:	68f8      	ldr	r0, [r7, #12]
 80025fe:	f000 f840 	bl	8002682 <UART_WaitOnFlagUntilTimeout>
 8002602:	4603      	mov	r3, r0
 8002604:	2b00      	cmp	r3, #0
 8002606:	d001      	beq.n	800260c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002608:	2303      	movs	r3, #3
 800260a:	e036      	b.n	800267a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d10b      	bne.n	800262a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002612:	69bb      	ldr	r3, [r7, #24]
 8002614:	881b      	ldrh	r3, [r3, #0]
 8002616:	461a      	mov	r2, r3
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002620:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002622:	69bb      	ldr	r3, [r7, #24]
 8002624:	3302      	adds	r3, #2
 8002626:	61bb      	str	r3, [r7, #24]
 8002628:	e007      	b.n	800263a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	781a      	ldrb	r2, [r3, #0]
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	3301      	adds	r3, #1
 8002638:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800263e:	b29b      	uxth	r3, r3
 8002640:	3b01      	subs	r3, #1
 8002642:	b29a      	uxth	r2, r3
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800264c:	b29b      	uxth	r3, r3
 800264e:	2b00      	cmp	r3, #0
 8002650:	d1cf      	bne.n	80025f2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	9300      	str	r3, [sp, #0]
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	2200      	movs	r2, #0
 800265a:	2140      	movs	r1, #64	; 0x40
 800265c:	68f8      	ldr	r0, [r7, #12]
 800265e:	f000 f810 	bl	8002682 <UART_WaitOnFlagUntilTimeout>
 8002662:	4603      	mov	r3, r0
 8002664:	2b00      	cmp	r3, #0
 8002666:	d001      	beq.n	800266c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002668:	2303      	movs	r3, #3
 800266a:	e006      	b.n	800267a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2220      	movs	r2, #32
 8002670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002674:	2300      	movs	r3, #0
 8002676:	e000      	b.n	800267a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002678:	2302      	movs	r3, #2
  }
}
 800267a:	4618      	mov	r0, r3
 800267c:	3720      	adds	r7, #32
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}

08002682 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002682:	b580      	push	{r7, lr}
 8002684:	b084      	sub	sp, #16
 8002686:	af00      	add	r7, sp, #0
 8002688:	60f8      	str	r0, [r7, #12]
 800268a:	60b9      	str	r1, [r7, #8]
 800268c:	603b      	str	r3, [r7, #0]
 800268e:	4613      	mov	r3, r2
 8002690:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002692:	e02c      	b.n	80026ee <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002694:	69bb      	ldr	r3, [r7, #24]
 8002696:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800269a:	d028      	beq.n	80026ee <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800269c:	69bb      	ldr	r3, [r7, #24]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d007      	beq.n	80026b2 <UART_WaitOnFlagUntilTimeout+0x30>
 80026a2:	f7fe fd7b 	bl	800119c <HAL_GetTick>
 80026a6:	4602      	mov	r2, r0
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	1ad3      	subs	r3, r2, r3
 80026ac:	69ba      	ldr	r2, [r7, #24]
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d21d      	bcs.n	80026ee <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	68da      	ldr	r2, [r3, #12]
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80026c0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	695a      	ldr	r2, [r3, #20]
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f022 0201 	bic.w	r2, r2, #1
 80026d0:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2220      	movs	r2, #32
 80026d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2220      	movs	r2, #32
 80026de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	2200      	movs	r2, #0
 80026e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e00f      	b.n	800270e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	4013      	ands	r3, r2
 80026f8:	68ba      	ldr	r2, [r7, #8]
 80026fa:	429a      	cmp	r2, r3
 80026fc:	bf0c      	ite	eq
 80026fe:	2301      	moveq	r3, #1
 8002700:	2300      	movne	r3, #0
 8002702:	b2db      	uxtb	r3, r3
 8002704:	461a      	mov	r2, r3
 8002706:	79fb      	ldrb	r3, [r7, #7]
 8002708:	429a      	cmp	r2, r3
 800270a:	d0c3      	beq.n	8002694 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800270c:	2300      	movs	r3, #0
}
 800270e:	4618      	mov	r0, r3
 8002710:	3710      	adds	r7, #16
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
	...

08002718 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b084      	sub	sp, #16
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	691b      	ldr	r3, [r3, #16]
 8002726:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	68da      	ldr	r2, [r3, #12]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	430a      	orrs	r2, r1
 8002734:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	689a      	ldr	r2, [r3, #8]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	691b      	ldr	r3, [r3, #16]
 800273e:	431a      	orrs	r2, r3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	695b      	ldr	r3, [r3, #20]
 8002744:	4313      	orrs	r3, r2
 8002746:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	68db      	ldr	r3, [r3, #12]
 800274e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002752:	f023 030c 	bic.w	r3, r3, #12
 8002756:	687a      	ldr	r2, [r7, #4]
 8002758:	6812      	ldr	r2, [r2, #0]
 800275a:	68b9      	ldr	r1, [r7, #8]
 800275c:	430b      	orrs	r3, r1
 800275e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	695b      	ldr	r3, [r3, #20]
 8002766:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	699a      	ldr	r2, [r3, #24]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	430a      	orrs	r2, r1
 8002774:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a2c      	ldr	r2, [pc, #176]	; (800282c <UART_SetConfig+0x114>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d103      	bne.n	8002788 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002780:	f7ff fbba 	bl	8001ef8 <HAL_RCC_GetPCLK2Freq>
 8002784:	60f8      	str	r0, [r7, #12]
 8002786:	e002      	b.n	800278e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002788:	f7ff fba2 	bl	8001ed0 <HAL_RCC_GetPCLK1Freq>
 800278c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800278e:	68fa      	ldr	r2, [r7, #12]
 8002790:	4613      	mov	r3, r2
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	4413      	add	r3, r2
 8002796:	009a      	lsls	r2, r3, #2
 8002798:	441a      	add	r2, r3
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80027a4:	4a22      	ldr	r2, [pc, #136]	; (8002830 <UART_SetConfig+0x118>)
 80027a6:	fba2 2303 	umull	r2, r3, r2, r3
 80027aa:	095b      	lsrs	r3, r3, #5
 80027ac:	0119      	lsls	r1, r3, #4
 80027ae:	68fa      	ldr	r2, [r7, #12]
 80027b0:	4613      	mov	r3, r2
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	4413      	add	r3, r2
 80027b6:	009a      	lsls	r2, r3, #2
 80027b8:	441a      	add	r2, r3
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80027c4:	4b1a      	ldr	r3, [pc, #104]	; (8002830 <UART_SetConfig+0x118>)
 80027c6:	fba3 0302 	umull	r0, r3, r3, r2
 80027ca:	095b      	lsrs	r3, r3, #5
 80027cc:	2064      	movs	r0, #100	; 0x64
 80027ce:	fb00 f303 	mul.w	r3, r0, r3
 80027d2:	1ad3      	subs	r3, r2, r3
 80027d4:	011b      	lsls	r3, r3, #4
 80027d6:	3332      	adds	r3, #50	; 0x32
 80027d8:	4a15      	ldr	r2, [pc, #84]	; (8002830 <UART_SetConfig+0x118>)
 80027da:	fba2 2303 	umull	r2, r3, r2, r3
 80027de:	095b      	lsrs	r3, r3, #5
 80027e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027e4:	4419      	add	r1, r3
 80027e6:	68fa      	ldr	r2, [r7, #12]
 80027e8:	4613      	mov	r3, r2
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	4413      	add	r3, r2
 80027ee:	009a      	lsls	r2, r3, #2
 80027f0:	441a      	add	r2, r3
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80027fc:	4b0c      	ldr	r3, [pc, #48]	; (8002830 <UART_SetConfig+0x118>)
 80027fe:	fba3 0302 	umull	r0, r3, r3, r2
 8002802:	095b      	lsrs	r3, r3, #5
 8002804:	2064      	movs	r0, #100	; 0x64
 8002806:	fb00 f303 	mul.w	r3, r0, r3
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	011b      	lsls	r3, r3, #4
 800280e:	3332      	adds	r3, #50	; 0x32
 8002810:	4a07      	ldr	r2, [pc, #28]	; (8002830 <UART_SetConfig+0x118>)
 8002812:	fba2 2303 	umull	r2, r3, r2, r3
 8002816:	095b      	lsrs	r3, r3, #5
 8002818:	f003 020f 	and.w	r2, r3, #15
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	440a      	add	r2, r1
 8002822:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002824:	bf00      	nop
 8002826:	3710      	adds	r7, #16
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}
 800282c:	40013800 	.word	0x40013800
 8002830:	51eb851f 	.word	0x51eb851f

08002834 <__libc_init_array>:
 8002834:	b570      	push	{r4, r5, r6, lr}
 8002836:	2600      	movs	r6, #0
 8002838:	4d0c      	ldr	r5, [pc, #48]	; (800286c <__libc_init_array+0x38>)
 800283a:	4c0d      	ldr	r4, [pc, #52]	; (8002870 <__libc_init_array+0x3c>)
 800283c:	1b64      	subs	r4, r4, r5
 800283e:	10a4      	asrs	r4, r4, #2
 8002840:	42a6      	cmp	r6, r4
 8002842:	d109      	bne.n	8002858 <__libc_init_array+0x24>
 8002844:	f000 f822 	bl	800288c <_init>
 8002848:	2600      	movs	r6, #0
 800284a:	4d0a      	ldr	r5, [pc, #40]	; (8002874 <__libc_init_array+0x40>)
 800284c:	4c0a      	ldr	r4, [pc, #40]	; (8002878 <__libc_init_array+0x44>)
 800284e:	1b64      	subs	r4, r4, r5
 8002850:	10a4      	asrs	r4, r4, #2
 8002852:	42a6      	cmp	r6, r4
 8002854:	d105      	bne.n	8002862 <__libc_init_array+0x2e>
 8002856:	bd70      	pop	{r4, r5, r6, pc}
 8002858:	f855 3b04 	ldr.w	r3, [r5], #4
 800285c:	4798      	blx	r3
 800285e:	3601      	adds	r6, #1
 8002860:	e7ee      	b.n	8002840 <__libc_init_array+0xc>
 8002862:	f855 3b04 	ldr.w	r3, [r5], #4
 8002866:	4798      	blx	r3
 8002868:	3601      	adds	r6, #1
 800286a:	e7f2      	b.n	8002852 <__libc_init_array+0x1e>
 800286c:	080028cc 	.word	0x080028cc
 8002870:	080028cc 	.word	0x080028cc
 8002874:	080028cc 	.word	0x080028cc
 8002878:	080028d0 	.word	0x080028d0

0800287c <memset>:
 800287c:	4603      	mov	r3, r0
 800287e:	4402      	add	r2, r0
 8002880:	4293      	cmp	r3, r2
 8002882:	d100      	bne.n	8002886 <memset+0xa>
 8002884:	4770      	bx	lr
 8002886:	f803 1b01 	strb.w	r1, [r3], #1
 800288a:	e7f9      	b.n	8002880 <memset+0x4>

0800288c <_init>:
 800288c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800288e:	bf00      	nop
 8002890:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002892:	bc08      	pop	{r3}
 8002894:	469e      	mov	lr, r3
 8002896:	4770      	bx	lr

08002898 <_fini>:
 8002898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800289a:	bf00      	nop
 800289c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800289e:	bc08      	pop	{r3}
 80028a0:	469e      	mov	lr, r3
 80028a2:	4770      	bx	lr
